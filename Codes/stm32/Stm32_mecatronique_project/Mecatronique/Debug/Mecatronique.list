
Mecatronique.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080060dc  080060dc  000070dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006124  08006124  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006124  08006124  00007124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800612c  0800612c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800612c  0800612c  0000712c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006130  08006130  00007130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006134  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  2000000c  08006140  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  08006140  0000880c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012756  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae5  00000000  00000000  0001a792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0001d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4c  00000000  00000000  0001e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b27  00000000  00000000  0001ee9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001403e  00000000  00000000  0003f9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5f82  00000000  00000000  00053a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119983  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004224  00000000  00000000  001199c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0011dbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060c4 	.word	0x080060c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	080060c4 	.word	0x080060c4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b988 	b.w	8000d74 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	468e      	mov	lr, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	4688      	mov	r8, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4617      	mov	r7, r2
 8000a90:	d962      	bls.n	8000b58 <__udivmoddi4+0xdc>
 8000a92:	fab2 f682 	clz	r6, r2
 8000a96:	b14e      	cbz	r6, 8000aac <__udivmoddi4+0x30>
 8000a98:	f1c6 0320 	rsb	r3, r6, #32
 8000a9c:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa0:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa4:	40b7      	lsls	r7, r6
 8000aa6:	ea43 0808 	orr.w	r8, r3, r8
 8000aaa:	40b4      	lsls	r4, r6
 8000aac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab0:	fa1f fc87 	uxth.w	ip, r7
 8000ab4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab8:	0c23      	lsrs	r3, r4, #16
 8000aba:	fb0e 8811 	mls	r8, lr, r1, r8
 8000abe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0x62>
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ad0:	f080 80ea 	bcs.w	8000ca8 <__udivmoddi4+0x22c>
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f240 80e7 	bls.w	8000ca8 <__udivmoddi4+0x22c>
 8000ada:	3902      	subs	r1, #2
 8000adc:	443b      	add	r3, r7
 8000ade:	1a9a      	subs	r2, r3, r2
 8000ae0:	b2a3      	uxth	r3, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aee:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af2:	459c      	cmp	ip, r3
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x8e>
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afc:	f080 80d6 	bcs.w	8000cac <__udivmoddi4+0x230>
 8000b00:	459c      	cmp	ip, r3
 8000b02:	f240 80d3 	bls.w	8000cac <__udivmoddi4+0x230>
 8000b06:	443b      	add	r3, r7
 8000b08:	3802      	subs	r0, #2
 8000b0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b0e:	eba3 030c 	sub.w	r3, r3, ip
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11d      	cbz	r5, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40f3      	lsrs	r3, r6
 8000b18:	2200      	movs	r2, #0
 8000b1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d905      	bls.n	8000b32 <__udivmoddi4+0xb6>
 8000b26:	b10d      	cbz	r5, 8000b2c <__udivmoddi4+0xb0>
 8000b28:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e7f5      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b32:	fab3 f183 	clz	r1, r3
 8000b36:	2900      	cmp	r1, #0
 8000b38:	d146      	bne.n	8000bc8 <__udivmoddi4+0x14c>
 8000b3a:	4573      	cmp	r3, lr
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xc8>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 8105 	bhi.w	8000d4e <__udivmoddi4+0x2d2>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4690      	mov	r8, r2
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0e5      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b52:	e9c5 4800 	strd	r4, r8, [r5]
 8000b56:	e7e2      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	f000 8090 	beq.w	8000c7e <__udivmoddi4+0x202>
 8000b5e:	fab2 f682 	clz	r6, r2
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f040 80a4 	bne.w	8000cb0 <__udivmoddi4+0x234>
 8000b68:	1a8a      	subs	r2, r1, r2
 8000b6a:	0c03      	lsrs	r3, r0, #16
 8000b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b70:	b280      	uxth	r0, r0
 8000b72:	b2bc      	uxth	r4, r7
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b82:	fb04 f20c 	mul.w	r2, r4, ip
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d907      	bls.n	8000b9a <__udivmoddi4+0x11e>
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x11c>
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f200 80e0 	bhi.w	8000d58 <__udivmoddi4+0x2dc>
 8000b98:	46c4      	mov	ip, r8
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ba4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba8:	fb02 f404 	mul.w	r4, r2, r4
 8000bac:	429c      	cmp	r4, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x144>
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x142>
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	f200 80ca 	bhi.w	8000d52 <__udivmoddi4+0x2d6>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	1b1b      	subs	r3, r3, r4
 8000bc2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bc8:	f1c1 0620 	rsb	r6, r1, #32
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd2:	431f      	orrs	r7, r3
 8000bd4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bdc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	fa1f fc87 	uxth.w	ip, r7
 8000bee:	fbbe f0f9 	udiv	r0, lr, r9
 8000bf2:	0c1c      	lsrs	r4, r3, #16
 8000bf4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bfc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x1a0>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c0e:	f080 809c 	bcs.w	8000d4a <__udivmoddi4+0x2ce>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f240 8099 	bls.w	8000d4a <__udivmoddi4+0x2ce>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	eba4 040e 	sub.w	r4, r4, lr
 8000c20:	fa1f fe83 	uxth.w	lr, r3
 8000c24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c28:	fb09 4413 	mls	r4, r9, r3, r4
 8000c2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1ce>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c3e:	f080 8082 	bcs.w	8000d46 <__udivmoddi4+0x2ca>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d97f      	bls.n	8000d46 <__udivmoddi4+0x2ca>
 8000c46:	3b02      	subs	r3, #2
 8000c48:	443c      	add	r4, r7
 8000c4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c56:	4564      	cmp	r4, ip
 8000c58:	4673      	mov	r3, lr
 8000c5a:	46e1      	mov	r9, ip
 8000c5c:	d362      	bcc.n	8000d24 <__udivmoddi4+0x2a8>
 8000c5e:	d05f      	beq.n	8000d20 <__udivmoddi4+0x2a4>
 8000c60:	b15d      	cbz	r5, 8000c7a <__udivmoddi4+0x1fe>
 8000c62:	ebb8 0203 	subs.w	r2, r8, r3
 8000c66:	eb64 0409 	sbc.w	r4, r4, r9
 8000c6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c72:	431e      	orrs	r6, r3
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	e74f      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000c7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c82:	0c01      	lsrs	r1, r0, #16
 8000c84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4638      	mov	r0, r7
 8000c92:	463c      	mov	r4, r7
 8000c94:	46b8      	mov	r8, r7
 8000c96:	46be      	mov	lr, r7
 8000c98:	2620      	movs	r6, #32
 8000c9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c9e:	eba2 0208 	sub.w	r2, r2, r8
 8000ca2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ca6:	e766      	b.n	8000b76 <__udivmoddi4+0xfa>
 8000ca8:	4601      	mov	r1, r0
 8000caa:	e718      	b.n	8000ade <__udivmoddi4+0x62>
 8000cac:	4610      	mov	r0, r2
 8000cae:	e72c      	b.n	8000b0a <__udivmoddi4+0x8e>
 8000cb0:	f1c6 0220 	rsb	r2, r6, #32
 8000cb4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb8:	40b7      	lsls	r7, r6
 8000cba:	40b1      	lsls	r1, r6
 8000cbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cca:	b2bc      	uxth	r4, r7
 8000ccc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb08 f904 	mul.w	r9, r8, r4
 8000cda:	40b0      	lsls	r0, r6
 8000cdc:	4589      	cmp	r9, r1
 8000cde:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ce2:	b280      	uxth	r0, r0
 8000ce4:	d93e      	bls.n	8000d64 <__udivmoddi4+0x2e8>
 8000ce6:	1879      	adds	r1, r7, r1
 8000ce8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cec:	d201      	bcs.n	8000cf2 <__udivmoddi4+0x276>
 8000cee:	4589      	cmp	r9, r1
 8000cf0:	d81f      	bhi.n	8000d32 <__udivmoddi4+0x2b6>
 8000cf2:	eba1 0109 	sub.w	r1, r1, r9
 8000cf6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfa:	fb09 f804 	mul.w	r8, r9, r4
 8000cfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d02:	b292      	uxth	r2, r2
 8000d04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d08:	4542      	cmp	r2, r8
 8000d0a:	d229      	bcs.n	8000d60 <__udivmoddi4+0x2e4>
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d12:	d2c4      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d14:	4542      	cmp	r2, r8
 8000d16:	d2c2      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d18:	f1a9 0102 	sub.w	r1, r9, #2
 8000d1c:	443a      	add	r2, r7
 8000d1e:	e7be      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d20:	45f0      	cmp	r8, lr
 8000d22:	d29d      	bcs.n	8000c60 <__udivmoddi4+0x1e4>
 8000d24:	ebbe 0302 	subs.w	r3, lr, r2
 8000d28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	46e1      	mov	r9, ip
 8000d30:	e796      	b.n	8000c60 <__udivmoddi4+0x1e4>
 8000d32:	eba7 0909 	sub.w	r9, r7, r9
 8000d36:	4449      	add	r1, r9
 8000d38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d40:	fb09 f804 	mul.w	r8, r9, r4
 8000d44:	e7db      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d46:	4673      	mov	r3, lr
 8000d48:	e77f      	b.n	8000c4a <__udivmoddi4+0x1ce>
 8000d4a:	4650      	mov	r0, sl
 8000d4c:	e766      	b.n	8000c1c <__udivmoddi4+0x1a0>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e6fd      	b.n	8000b4e <__udivmoddi4+0xd2>
 8000d52:	443b      	add	r3, r7
 8000d54:	3a02      	subs	r2, #2
 8000d56:	e733      	b.n	8000bc0 <__udivmoddi4+0x144>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	443b      	add	r3, r7
 8000d5e:	e71c      	b.n	8000b9a <__udivmoddi4+0x11e>
 8000d60:	4649      	mov	r1, r9
 8000d62:	e79c      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d64:	eba1 0109 	sub.w	r1, r1, r9
 8000d68:	46c4      	mov	ip, r8
 8000d6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6e:	fb09 f804 	mul.w	r8, r9, r4
 8000d72:	e7c4      	b.n	8000cfe <__udivmoddi4+0x282>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <Lidar_init>:
#include "tim.h"
#include "stdint.h"
#include "usart.h"

// Initialisation du Lidar SLAMTECH A2M12
void Lidar_init(void) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //Lidar
 8000d7e:	2104      	movs	r1, #4
 8000d80:	4813      	ldr	r0, [pc, #76]	@ (8000dd0 <Lidar_init+0x58>)
 8000d82:	f002 fcbd 	bl	8003700 <HAL_TIM_PWM_Start>
	HAL_Delay(100);
 8000d86:	2064      	movs	r0, #100	@ 0x64
 8000d88:	f000 fed0 	bl	8001b2c <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 30); 			//démarrage du lidar par PWM
 8000d8c:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <Lidar_init+0x58>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	221e      	movs	r2, #30
 8000d92:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(2000);
 8000d94:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d98:	f000 fec8 	bl	8001b2c <HAL_Delay>
	uint8_t packet_CMD_RESET_SCAN[2] = { 0xA5, 0x25 };
 8000d9c:	f242 53a5 	movw	r3, #9637	@ 0x25a5
 8000da0:	80bb      	strh	r3, [r7, #4]
	uint8_t packet_CMD_START_SCAN[2] = { 0xA5, 0x20 };
 8000da2:	f242 03a5 	movw	r3, #8357	@ 0x20a5
 8000da6:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart1, packet_CMD_RESET_SCAN, 2, 100);	// Reset LiDAR
 8000da8:	1d39      	adds	r1, r7, #4
 8000daa:	2364      	movs	r3, #100	@ 0x64
 8000dac:	2202      	movs	r2, #2
 8000dae:	4809      	ldr	r0, [pc, #36]	@ (8000dd4 <Lidar_init+0x5c>)
 8000db0:	f003 fc3c 	bl	800462c <HAL_UART_Transmit>
	HAL_Delay(15);
 8000db4:	200f      	movs	r0, #15
 8000db6:	f000 feb9 	bl	8001b2c <HAL_Delay>
	HAL_UART_Transmit(&huart1, packet_CMD_START_SCAN, 2, 100);	// Start LiDAR
 8000dba:	4639      	mov	r1, r7
 8000dbc:	2364      	movs	r3, #100	@ 0x64
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <Lidar_init+0x5c>)
 8000dc2:	f003 fc33 	bl	800462c <HAL_UART_Transmit>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000734 	.word	0x20000734
 8000dd4:	20000780 	.word	0x20000780

08000dd8 <Propulsion_init>:
 *  Created on: May 21, 2023
 *      Author: ajuton
 */
#include "CoVAPSy_moteurs.h"

void Propulsion_init(void){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <Propulsion_init+0x10>)
 8000de0:	f002 fc8e 	bl	8003700 <HAL_TIM_PWM_Start>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200006e8 	.word	0x200006e8

08000dec <Direction_init>:

void Direction_init(void){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000df0:	210c      	movs	r1, #12
 8000df2:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <Direction_init+0x10>)
 8000df4:	f002 fc84 	bl	8003700 <HAL_TIM_PWM_Start>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200006e8 	.word	0x200006e8

08000e00 <set_direction_degres>:

void set_direction_degres(float angle_degre)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t largeur_impulsion_us;
	if (angle_degre < -DIR_ANGLE_MAX)
 8000e0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e0e:	eebb 7a02 	vmov.f32	s14, #178	@ 0xc1900000 -18.0
 8000e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1a:	d502      	bpl.n	8000e22 <set_direction_degres+0x22>
		angle_degre = -DIR_ANGLE_MAX;
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e90 <set_direction_degres+0x90>)
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	e00a      	b.n	8000e38 <set_direction_degres+0x38>
	else if (angle_degre > DIR_ANGLE_MAX)
 8000e22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e26:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8000e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e32:	dd01      	ble.n	8000e38 <set_direction_degres+0x38>
		angle_degre = +DIR_ANGLE_MAX;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <set_direction_degres+0x94>)
 8000e36:	607b      	str	r3, [r7, #4]
	largeur_impulsion_us = DIR_MILIEU - (DIR_BUTEE_GAUCHE - DIR_BUTEE_DROITE)*angle_degre/(2*DIR_ANGLE_MAX);
 8000e38:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e3c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000e98 <set_direction_degres+0x98>
 8000e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e44:	ee17 0a90 	vmov	r0, s15
 8000e48:	f7ff fb26 	bl	8000498 <__aeabi_f2d>
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <set_direction_degres+0x9c>)
 8000e52:	f7ff fca3 	bl	800079c <__aeabi_ddiv>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	a10b      	add	r1, pc, #44	@ (adr r1, 8000e88 <set_direction_degres+0x88>)
 8000e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e60:	f7ff f9ba 	bl	80001d8 <__aeabi_dsub>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff fd7e 	bl	800096c <__aeabi_d2uiz>
 8000e70:	4603      	mov	r3, r0
 8000e72:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, largeur_impulsion_us);
 8000e74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <set_direction_degres+0xa0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	f3af 8000 	nop.w
 8000e88:	00000000 	.word	0x00000000
 8000e8c:	40913000 	.word	0x40913000
 8000e90:	c1900000 	.word	0xc1900000
 8000e94:	41900000 	.word	0x41900000
 8000e98:	43c80000 	.word	0x43c80000
 8000e9c:	40420000 	.word	0x40420000
 8000ea0:	200006e8 	.word	0x200006e8

08000ea4 <set_vitesse_m_s>:

void set_vitesse_m_s(float vitesse_m_s){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t largeur_impulsion_us;
	if (vitesse_m_s == 0)
 8000eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eba:	d103      	bne.n	8000ec4 <set_vitesse_m_s+0x20>
	{
		largeur_impulsion_us = PROP_REPOS ;
 8000ebc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e066      	b.n	8000f92 <set_vitesse_m_s+0xee>
	}
	else if (vitesse_m_s < 0){
 8000ec4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ec8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed0:	d52c      	bpl.n	8000f2c <set_vitesse_m_s+0x88>
		if(vitesse_m_s < -V_MAX_HARD)
 8000ed2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ed6:	eeba 7a00 	vmov.f32	s14, #160	@ 0xc1000000 -8.0
 8000eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee2:	d502      	bpl.n	8000eea <set_vitesse_m_s+0x46>
			vitesse_m_s  = -V_MAX_HARD;
 8000ee4:	f04f 4341 	mov.w	r3, #3238002688	@ 0xc1000000
 8000ee8:	607b      	str	r3, [r7, #4]
		largeur_impulsion_us = PROP_POINT_MORT_NEG + (PROP_MAX - PROP_POINT_MORT) * vitesse_m_s / V_MAX_HARD;
 8000eea:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eee:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000fa4 <set_vitesse_m_s+0x100>
 8000ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef6:	ee17 0a90 	vmov	r0, s15
 8000efa:	f7ff facd 	bl	8000498 <__aeabi_f2d>
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	4b29      	ldr	r3, [pc, #164]	@ (8000fa8 <set_vitesse_m_s+0x104>)
 8000f04:	f7ff fc4a 	bl	800079c <__aeabi_ddiv>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <set_vitesse_m_s+0x108>)
 8000f16:	f7ff f961 	bl	80001dc <__adddf3>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff fd23 	bl	800096c <__aeabi_d2uiz>
 8000f26:	4603      	mov	r3, r0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	e032      	b.n	8000f92 <set_vitesse_m_s+0xee>
		//version variateur bizarre
		//largeur_impulsion_us = PROP_POINT_MORT - (PROP_MAX - PROP_POINT_MORT) * vitesse_m_s / V_MAX_HARD;
	}
	else if (vitesse_m_s > 0){
 8000f2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f38:	dd2b      	ble.n	8000f92 <set_vitesse_m_s+0xee>
		if (vitesse_m_s > V_MAX_SOFT)
 8000f3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4a:	dd02      	ble.n	8000f52 <set_vitesse_m_s+0xae>
			vitesse_m_s = V_MAX_SOFT;
 8000f4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f50:	607b      	str	r3, [r7, #4]
		largeur_impulsion_us = PROP_POINT_MORT + (PROP_MAX - PROP_POINT_MORT) * vitesse_m_s / V_MAX_HARD;
 8000f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f56:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000fa4 <set_vitesse_m_s+0x100>
 8000f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5e:	ee17 0a90 	vmov	r0, s15
 8000f62:	f7ff fa99 	bl	8000498 <__aeabi_f2d>
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <set_vitesse_m_s+0x104>)
 8000f6c:	f7ff fc16 	bl	800079c <__aeabi_ddiv>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <set_vitesse_m_s+0x10c>)
 8000f7e:	f7ff f92d 	bl	80001dc <__adddf3>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fcef 	bl	800096c <__aeabi_d2uiz>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	60fb      	str	r3, [r7, #12]
		//version variateur bizarre
		//largeur_impulsion_us = PROP_POINT_MORT_NEG - (PROP_MAX - PROP_POINT_MORT) * vitesse_m_s / V_MAX_HARD;
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, largeur_impulsion_us);
 8000f92:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <set_vitesse_m_s+0x110>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	c33e0000 	.word	0xc33e0000
 8000fa8:	40200000 	.word	0x40200000
 8000fac:	40986000 	.word	0x40986000
 8000fb0:	40968000 	.word	0x40968000
 8000fb4:	200006e8 	.word	0x200006e8

08000fb8 <recule>:

void recule(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    set_vitesse_m_s(-V_MAX_HARD);
 8000fbc:	eeba 0a00 	vmov.f32	s0, #160	@ 0xc1000000 -8.0
 8000fc0:	f7ff ff70 	bl	8000ea4 <set_vitesse_m_s>
    HAL_Delay(200);
 8000fc4:	20c8      	movs	r0, #200	@ 0xc8
 8000fc6:	f000 fdb1 	bl	8001b2c <HAL_Delay>
    set_vitesse_m_s(0);
 8000fca:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000fe4 <recule+0x2c>
 8000fce:	f7ff ff69 	bl	8000ea4 <set_vitesse_m_s>
    HAL_Delay(100);
 8000fd2:	2064      	movs	r0, #100	@ 0x64
 8000fd4:	f000 fdaa 	bl	8001b2c <HAL_Delay>
    set_vitesse_m_s(-4);
 8000fd8:	eeb9 0a00 	vmov.f32	s0, #144	@ 0xc0800000 -4.0
 8000fdc:	f7ff ff62 	bl	8000ea4 <set_vitesse_m_s>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	00000000 	.word	0x00000000

08000fe8 <MX_DMA_Init>:
#include "dma.h"

DMA_HandleTypeDef hdma_usart1_rx;

void MX_DMA_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_DMA_Init+0x38>)
 8000ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8001020 <MX_DMA_Init+0x38>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_DMA_Init+0x38>)
 8000ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	200f      	movs	r0, #15
 800100c:	f000 fe8d 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001010:	200f      	movs	r0, #15
 8001012:	f000 fea6 	bl	8001d62 <HAL_NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000

08001024 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	4b33      	ldr	r3, [pc, #204]	@ (8001108 <MX_GPIO_Init+0xe4>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	4a32      	ldr	r2, [pc, #200]	@ (8001108 <MX_GPIO_Init+0xe4>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001046:	4b30      	ldr	r3, [pc, #192]	@ (8001108 <MX_GPIO_Init+0xe4>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b2d      	ldr	r3, [pc, #180]	@ (8001108 <MX_GPIO_Init+0xe4>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	4a2c      	ldr	r2, [pc, #176]	@ (8001108 <MX_GPIO_Init+0xe4>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105e:	4b2a      	ldr	r3, [pc, #168]	@ (8001108 <MX_GPIO_Init+0xe4>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b27      	ldr	r3, [pc, #156]	@ (8001108 <MX_GPIO_Init+0xe4>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	4a26      	ldr	r2, [pc, #152]	@ (8001108 <MX_GPIO_Init+0xe4>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001076:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <MX_GPIO_Init+0xe4>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <MX_GPIO_Init+0xe4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	4a20      	ldr	r2, [pc, #128]	@ (8001108 <MX_GPIO_Init+0xe4>)
 8001088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800108c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108e:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <MX_GPIO_Init+0xe4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800109a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a0:	2303      	movs	r3, #3
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4817      	ldr	r0, [pc, #92]	@ (800110c <MX_GPIO_Init+0xe8>)
 80010b0:	f000 ff80 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010b4:	f249 03ff 	movw	r3, #37119	@ 0x90ff
 80010b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ba:	2303      	movs	r3, #3
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010cc:	f000 ff72 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80010d0:	23f3      	movs	r3, #243	@ 0xf3
 80010d2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d4:	2303      	movs	r3, #3
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	480b      	ldr	r0, [pc, #44]	@ (8001110 <MX_GPIO_Init+0xec>)
 80010e4:	f000 ff66 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010e8:	2308      	movs	r3, #8
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ec:	2303      	movs	r3, #3
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	@ (8001114 <MX_GPIO_Init+0xf0>)
 80010fc:	f000 ff5a 	bl	8001fb4 <HAL_GPIO_Init>

}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	@ 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000
 800110c:	48000800 	.word	0x48000800
 8001110:	48000400 	.word	0x48000400
 8001114:	48001c00 	.word	0x48001c00

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t drapeau_fin_tour_old = 0;			// Variable pour le LiDAR
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001126:	f000 fc8c 	bl	8001a42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112a:	f000 f8a1 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112e:	f7ff ff79 	bl	8001024 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001132:	f000 fa11 	bl	8001558 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001136:	f000 fac7 	bl	80016c8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800113a:	f000 fbc9 	bl	80018d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Lidar_init();
 800113e:	f7ff fe1b 	bl	8000d78 <Lidar_init>
  HAL_UART_Receive_IT(&huart1, &Data_RX_LIDAR, 1);
 8001142:	2201      	movs	r2, #1
 8001144:	4942      	ldr	r1, [pc, #264]	@ (8001250 <main+0x138>)
 8001146:	4843      	ldr	r0, [pc, #268]	@ (8001254 <main+0x13c>)
 8001148:	f003 fafa 	bl	8004740 <HAL_UART_Receive_IT>
  Propulsion_init();
 800114c:	f7ff fe44 	bl	8000dd8 <Propulsion_init>
  Direction_init();
 8001150:	f7ff fe4c 	bl	8000dec <Direction_init>
  MX_DMA_Init();
 8001154:	f7ff ff48 	bl	8000fe8 <MX_DMA_Init>
	HAL_Delay(500);
	set_direction_degres(0);
	HAL_Delay(500);*/


	set_vitesse_m_s(1.0);
 8001158:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800115c:	f7ff fea2 	bl	8000ea4 <set_vitesse_m_s>
	HAL_Delay(1000);
 8001160:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001164:	f000 fce2 	bl	8001b2c <HAL_Delay>
	set_vitesse_m_s(2.0);
 8001168:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800116c:	f7ff fe9a 	bl	8000ea4 <set_vitesse_m_s>
	HAL_Delay(1000);
 8001170:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001174:	f000 fcda 	bl	8001b2c <HAL_Delay>
	set_vitesse_m_s(3.0);
 8001178:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800117c:	f7ff fe92 	bl	8000ea4 <set_vitesse_m_s>
	HAL_Delay(1000);
 8001180:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001184:	f000 fcd2 	bl	8001b2c <HAL_Delay>
	set_vitesse_m_s(0.0);
 8001188:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001258 <main+0x140>
 800118c:	f7ff fe8a 	bl	8000ea4 <set_vitesse_m_s>
	HAL_Delay(1000);
 8001190:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001194:	f000 fcca 	bl	8001b2c <HAL_Delay>
	recule();
 8001198:	f7ff ff0e 	bl	8000fb8 <recule>
	HAL_Delay(1000);
 800119c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011a0:	f000 fcc4 	bl	8001b2c <HAL_Delay>
	set_vitesse_m_s(0.0);
 80011a4:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001258 <main+0x140>
 80011a8:	f7ff fe7c 	bl	8000ea4 <set_vitesse_m_s>
	HAL_Delay(1000);
 80011ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011b0:	f000 fcbc 	bl	8001b2c <HAL_Delay>
  {

	  ///////////////////////////////////////////////////////////////////////////////////////////
	 //Recopie du tableau lidar en fin de tour, avec passage de sens horaire à sens trigo///////
	///////////////////////////////////////////////////////////////////////////////////////////
	if ((drapeau_fin_tour == 1) && (drapeau_fin_tour_old == 0)) {
 80011b4:	4b29      	ldr	r3, [pc, #164]	@ (800125c <main+0x144>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d114      	bne.n	80011e6 <main+0xce>
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d111      	bne.n	80011e6 <main+0xce>
		for (i = 0; i < 360; i++) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	e00a      	b.n	80011de <main+0xc6>
			data_lidar_mm_main[i] = Data_Lidar_mm[i];
 80011c8:	4a25      	ldr	r2, [pc, #148]	@ (8001260 <main+0x148>)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80011d0:	4a24      	ldr	r2, [pc, #144]	@ (8001264 <main+0x14c>)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < 360; i++) {
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80011e4:	d3f0      	bcc.n	80011c8 <main+0xb0>
		}
	}
	drapeau_fin_tour_old = drapeau_fin_tour;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <main+0x144>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]

	//////////////////////////////////////////////////////////////////////////////
	/////// Gestion de la direction en fonction des données LIDAR
	//////////////////////////////////////////////////////////////////////////////
	angle_degre = 0.02 * (data_lidar_mm_main[60] - data_lidar_mm_main[300]); //distance à 60° - distance à -60°
 80011ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <main+0x14c>)
 80011ee:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <main+0x14c>)
 80011f6:	f8b3 3258 	ldrh.w	r3, [r3, #600]	@ 0x258
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f939 	bl	8000474 <__aeabi_i2d>
 8001202:	a311      	add	r3, pc, #68	@ (adr r3, 8001248 <main+0x130>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f99e 	bl	8000548 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fbca 	bl	80009ac <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	4a13      	ldr	r2, [pc, #76]	@ (8001268 <main+0x150>)
 800121c:	6013      	str	r3, [r2, #0]
	set_direction_degres(angle_degre);
 800121e:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <main+0x150>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	eeb0 0a67 	vmov.f32	s0, s15
 8001228:	f7ff fdea 	bl	8000e00 <set_direction_degres>

	vitesse_m_s = 0.5;
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <main+0x154>)
 800122e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001232:	601a      	str	r2, [r3, #0]
	set_vitesse_m_s(vitesse_m_s);
 8001234:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <main+0x154>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	eeb0 0a67 	vmov.f32	s0, s15
 800123e:	f7ff fe31 	bl	8000ea4 <set_vitesse_m_s>
	if ((drapeau_fin_tour == 1) && (drapeau_fin_tour_old == 0)) {
 8001242:	e7b7      	b.n	80011b4 <main+0x9c>
 8001244:	f3af 8000 	nop.w
 8001248:	47ae147b 	.word	0x47ae147b
 800124c:	3f947ae1 	.word	0x3f947ae1
 8001250:	20000028 	.word	0x20000028
 8001254:	20000780 	.word	0x20000780
 8001258:	00000000 	.word	0x00000000
 800125c:	200002fc 	.word	0x200002fc
 8001260:	2000002c 	.word	0x2000002c
 8001264:	20000300 	.word	0x20000300
 8001268:	200005d0 	.word	0x200005d0
 800126c:	200005d4 	.word	0x200005d4

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b096      	sub	sp, #88	@ 0x58
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	2244      	movs	r2, #68	@ 0x44
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f004 fef4 	bl	800606c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001292:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001296:	f001 f805 	bl	80022a4 <HAL_PWREx_ControlVoltageScaling>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012a0:	f000 f8e4 	bl	800146c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012a4:	2310      	movs	r3, #16
 80012a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012b0:	2360      	movs	r3, #96	@ 0x60
 80012b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b4:	2302      	movs	r3, #2
 80012b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012b8:	2301      	movs	r3, #1
 80012ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80012c0:	2328      	movs	r3, #40	@ 0x28
 80012c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012c4:	2307      	movs	r3, #7
 80012c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 f83b 	bl	8002350 <HAL_RCC_OscConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80012e0:	f000 f8c4 	bl	800146c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e4:	230f      	movs	r3, #15
 80012e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e8:	2303      	movs	r3, #3
 80012ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012f8:	463b      	mov	r3, r7
 80012fa:	2104      	movs	r1, #4
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 fc3b 	bl	8002b78 <HAL_RCC_ClockConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001308:	f000 f8b0 	bl	800146c <Error_Handler>
  }
}
 800130c:	bf00      	nop
 800130e:	3758      	adds	r7, #88	@ 0x58
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	uint16_t distance;

	//////////////////////////////////////////////////////////////////////////////
	/////// Réception des sept octets correspondant au descriptor     ////////////
	//////////////////////////////////////////////////////////////////////////////
	if (drapeau_demarrage == 0) {
 800131c:	4b4b      	ldr	r3, [pc, #300]	@ (800144c <HAL_UART_RxCpltCallback+0x138>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10a      	bne.n	800133a <HAL_UART_RxCpltCallback+0x26>
		tableau_trame[index] = Data_RX_LIDAR;
 8001324:	4b4a      	ldr	r3, [pc, #296]	@ (8001450 <HAL_UART_RxCpltCallback+0x13c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a4a      	ldr	r2, [pc, #296]	@ (8001454 <HAL_UART_RxCpltCallback+0x140>)
 800132a:	7811      	ldrb	r1, [r2, #0]
 800132c:	4a4a      	ldr	r2, [pc, #296]	@ (8001458 <HAL_UART_RxCpltCallback+0x144>)
 800132e:	54d1      	strb	r1, [r2, r3]
		index++;
 8001330:	4b47      	ldr	r3, [pc, #284]	@ (8001450 <HAL_UART_RxCpltCallback+0x13c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	4a46      	ldr	r2, [pc, #280]	@ (8001450 <HAL_UART_RxCpltCallback+0x13c>)
 8001338:	6013      	str	r3, [r2, #0]
	}
	if ((index == 7) && (drapeau_demarrage == 0)) {
 800133a:	4b45      	ldr	r3, [pc, #276]	@ (8001450 <HAL_UART_RxCpltCallback+0x13c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b07      	cmp	r3, #7
 8001340:	d109      	bne.n	8001356 <HAL_UART_RxCpltCallback+0x42>
 8001342:	4b42      	ldr	r3, [pc, #264]	@ (800144c <HAL_UART_RxCpltCallback+0x138>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d105      	bne.n	8001356 <HAL_UART_RxCpltCallback+0x42>
		index = 0;
 800134a:	4b41      	ldr	r3, [pc, #260]	@ (8001450 <HAL_UART_RxCpltCallback+0x13c>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
		drapeau_demarrage = 1;				// Fin des sept octets du descriptor
 8001350:	4b3e      	ldr	r3, [pc, #248]	@ (800144c <HAL_UART_RxCpltCallback+0x138>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////////
	/////// Réception des données par groupe de 5 octets          	   /////////
	/////// Qualité (1 octet), Angle (2 octets) et Distance (2 octets)   /////////
	//////////////////////////////////////////////////////////////////////////////
	if (drapeau_demarrage == 1) {
 8001356:	4b3d      	ldr	r3, [pc, #244]	@ (800144c <HAL_UART_RxCpltCallback+0x138>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d16c      	bne.n	8001438 <HAL_UART_RxCpltCallback+0x124>
		if (index <= 4) {
 800135e:	4b3c      	ldr	r3, [pc, #240]	@ (8001450 <HAL_UART_RxCpltCallback+0x13c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b04      	cmp	r3, #4
 8001364:	d81d      	bhi.n	80013a2 <HAL_UART_RxCpltCallback+0x8e>
			if ((Data_RX_LIDAR == 0x3e) || (Data_RX_LIDAR == 0x3d)) //trame de démarrage
 8001366:	4b3b      	ldr	r3, [pc, #236]	@ (8001454 <HAL_UART_RxCpltCallback+0x140>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b3e      	cmp	r3, #62	@ 0x3e
 800136c:	d003      	beq.n	8001376 <HAL_UART_RxCpltCallback+0x62>
 800136e:	4b39      	ldr	r3, [pc, #228]	@ (8001454 <HAL_UART_RxCpltCallback+0x140>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b3d      	cmp	r3, #61	@ 0x3d
 8001374:	d102      	bne.n	800137c <HAL_UART_RxCpltCallback+0x68>
				index = 0;
 8001376:	4b36      	ldr	r3, [pc, #216]	@ (8001450 <HAL_UART_RxCpltCallback+0x13c>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
			tableau_trame[index] = Data_RX_LIDAR;
 800137c:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <HAL_UART_RxCpltCallback+0x13c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a34      	ldr	r2, [pc, #208]	@ (8001454 <HAL_UART_RxCpltCallback+0x140>)
 8001382:	7811      	ldrb	r1, [r2, #0]
 8001384:	4a34      	ldr	r2, [pc, #208]	@ (8001458 <HAL_UART_RxCpltCallback+0x144>)
 8001386:	54d1      	strb	r1, [r2, r3]
			if ((tableau_trame[0] == 0x3e) || (tableau_trame[0] == 0x3d))
 8001388:	4b33      	ldr	r3, [pc, #204]	@ (8001458 <HAL_UART_RxCpltCallback+0x144>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b3e      	cmp	r3, #62	@ 0x3e
 800138e:	d003      	beq.n	8001398 <HAL_UART_RxCpltCallback+0x84>
 8001390:	4b31      	ldr	r3, [pc, #196]	@ (8001458 <HAL_UART_RxCpltCallback+0x144>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b3d      	cmp	r3, #61	@ 0x3d
 8001396:	d104      	bne.n	80013a2 <HAL_UART_RxCpltCallback+0x8e>
				index++;
 8001398:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <HAL_UART_RxCpltCallback+0x13c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	4a2c      	ldr	r2, [pc, #176]	@ (8001450 <HAL_UART_RxCpltCallback+0x13c>)
 80013a0:	6013      	str	r3, [r2, #0]
		}
		///////////////////////////////////////////////////////////
		/////// Traitement de donnée pour convertir      	/////////
		/////// les octets reçus en données réelles       /////////
		//////////////////////////////////////////////////////////
		if (index >= 5) {
 80013a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <HAL_UART_RxCpltCallback+0x13c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d946      	bls.n	8001438 <HAL_UART_RxCpltCallback+0x124>
			index = 0;
 80013aa:	4b29      	ldr	r3, [pc, #164]	@ (8001450 <HAL_UART_RxCpltCallback+0x13c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
			angle = ((uint16_t) tableau_trame[2] << 1)
 80013b0:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <HAL_UART_RxCpltCallback+0x144>)
 80013b2:	789b      	ldrb	r3, [r3, #2]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	b29b      	uxth	r3, r3
					+ ((uint16_t) tableau_trame[1] >> 7);
 80013b8:	4a27      	ldr	r2, [pc, #156]	@ (8001458 <HAL_UART_RxCpltCallback+0x144>)
 80013ba:	7852      	ldrb	r2, [r2, #1]
 80013bc:	09d2      	lsrs	r2, r2, #7
 80013be:	b2d2      	uxtb	r2, r2
			angle = ((uint16_t) tableau_trame[2] << 1)
 80013c0:	4413      	add	r3, r2
 80013c2:	81fb      	strh	r3, [r7, #14]
			distance = ((uint16_t) tableau_trame[4] << 6)
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <HAL_UART_RxCpltCallback+0x144>)
 80013c6:	791b      	ldrb	r3, [r3, #4]
 80013c8:	019b      	lsls	r3, r3, #6
 80013ca:	b29b      	uxth	r3, r3
					+ ((uint16_t) tableau_trame[3] >> 2);
 80013cc:	4a22      	ldr	r2, [pc, #136]	@ (8001458 <HAL_UART_RxCpltCallback+0x144>)
 80013ce:	78d2      	ldrb	r2, [r2, #3]
 80013d0:	0892      	lsrs	r2, r2, #2
 80013d2:	b2d2      	uxtb	r2, r2
			distance = ((uint16_t) tableau_trame[4] << 6)
 80013d4:	4413      	add	r3, r2
 80013d6:	81bb      	strh	r3, [r7, #12]

			////// Stockage de la distance mesurée dans le tableau à l'indice associé à l'angle
			if (angle == 0)
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <HAL_UART_RxCpltCallback+0xd0>
				Data_Lidar_mm[0] = distance;
 80013de:	4a1f      	ldr	r2, [pc, #124]	@ (800145c <HAL_UART_RxCpltCallback+0x148>)
 80013e0:	89bb      	ldrh	r3, [r7, #12]
 80013e2:	8013      	strh	r3, [r2, #0]
			if ((angle < 360) && (angle > 0))
 80013e4:	89fb      	ldrh	r3, [r7, #14]
 80013e6:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80013ea:	d209      	bcs.n	8001400 <HAL_UART_RxCpltCallback+0xec>
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <HAL_UART_RxCpltCallback+0xec>
				Data_Lidar_mm[360 - angle] = distance;
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 80013f8:	4918      	ldr	r1, [pc, #96]	@ (800145c <HAL_UART_RxCpltCallback+0x148>)
 80013fa:	89ba      	ldrh	r2, [r7, #12]
 80013fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

			///////////////////////////////////////////////////////////
			///////  Détection de la fin d'un tour    	    /////////
			//////////////////////////////////////////////////////////
			if ((angle > 100) && (angle < 180) && (drapeau_fin_tour == 0)) {
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	2b64      	cmp	r3, #100	@ 0x64
 8001404:	d909      	bls.n	800141a <HAL_UART_RxCpltCallback+0x106>
 8001406:	89fb      	ldrh	r3, [r7, #14]
 8001408:	2bb3      	cmp	r3, #179	@ 0xb3
 800140a:	d806      	bhi.n	800141a <HAL_UART_RxCpltCallback+0x106>
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <HAL_UART_RxCpltCallback+0x14c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <HAL_UART_RxCpltCallback+0x106>
				drapeau_fin_tour = 1;
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_UART_RxCpltCallback+0x14c>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
			}
			if ((angle > 270) && (angle < 360) && (drapeau_fin_tour == 1)) {
 800141a:	89fb      	ldrh	r3, [r7, #14]
 800141c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001420:	d90a      	bls.n	8001438 <HAL_UART_RxCpltCallback+0x124>
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001428:	d206      	bcs.n	8001438 <HAL_UART_RxCpltCallback+0x124>
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <HAL_UART_RxCpltCallback+0x14c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d102      	bne.n	8001438 <HAL_UART_RxCpltCallback+0x124>
				drapeau_fin_tour = 0;
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <HAL_UART_RxCpltCallback+0x14c>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
		}

	}

	///// Ré-activation de l'interruption UART RX
	HAL_UART_Receive_DMA(&huart1, dma_uart_rx_buffer, 256);
 8001438:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800143c:	4909      	ldr	r1, [pc, #36]	@ (8001464 <HAL_UART_RxCpltCallback+0x150>)
 800143e:	480a      	ldr	r0, [pc, #40]	@ (8001468 <HAL_UART_RxCpltCallback+0x154>)
 8001440:	f003 f9ca 	bl	80047d8 <HAL_UART_Receive_DMA>

}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200006d8 	.word	0x200006d8
 8001450:	200006dc 	.word	0x200006dc
 8001454:	20000028 	.word	0x20000028
 8001458:	200006e0 	.word	0x200006e0
 800145c:	2000002c 	.word	0x2000002c
 8001460:	200002fc 	.word	0x200002fc
 8001464:	200005d8 	.word	0x200005d8
 8001468:	20000780 	.word	0x20000780

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <Error_Handler+0x8>

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <HAL_MspInit+0x44>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001482:	4a0e      	ldr	r2, [pc, #56]	@ (80014bc <HAL_MspInit+0x44>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6613      	str	r3, [r2, #96]	@ 0x60
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <HAL_MspInit+0x44>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <HAL_MspInit+0x44>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <HAL_MspInit+0x44>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_MspInit+0x44>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <NMI_Handler+0x4>

080014c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <MemManage_Handler+0x4>

080014d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 fae9 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <USART1_IRQHandler+0x10>)
 8001526:	f003 f9a3 	bl	8004870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000780 	.word	0x20000780

08001534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <SystemInit+0x20>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153e:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <SystemInit+0x20>)
 8001540:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b09a      	sub	sp, #104	@ 0x68
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001578:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
 8001588:	615a      	str	r2, [r3, #20]
 800158a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	222c      	movs	r2, #44	@ 0x2c
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f004 fd6a 	bl	800606c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001598:	4b49      	ldr	r3, [pc, #292]	@ (80016c0 <MX_TIM1_Init+0x168>)
 800159a:	4a4a      	ldr	r2, [pc, #296]	@ (80016c4 <MX_TIM1_Init+0x16c>)
 800159c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800159e:	4b48      	ldr	r3, [pc, #288]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015a0:	224f      	movs	r2, #79	@ 0x4f
 80015a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b46      	ldr	r3, [pc, #280]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80015aa:	4b45      	ldr	r3, [pc, #276]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015ac:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80015b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b43      	ldr	r3, [pc, #268]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015b8:	4b41      	ldr	r3, [pc, #260]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015be:	4b40      	ldr	r3, [pc, #256]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015c4:	483e      	ldr	r0, [pc, #248]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015c6:	f001 ffe3 	bl	8003590 <HAL_TIM_Base_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015d0:	f7ff ff4c 	bl	800146c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015de:	4619      	mov	r1, r3
 80015e0:	4837      	ldr	r0, [pc, #220]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015e2:	f002 fa7f 	bl	8003ae4 <HAL_TIM_ConfigClockSource>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80015ec:	f7ff ff3e 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015f0:	4833      	ldr	r0, [pc, #204]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015f2:	f002 f824 	bl	800363e <HAL_TIM_PWM_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80015fc:	f7ff ff36 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001610:	4619      	mov	r1, r3
 8001612:	482b      	ldr	r0, [pc, #172]	@ (80016c0 <MX_TIM1_Init+0x168>)
 8001614:	f002 fede 	bl	80043d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800161e:	f7ff ff25 	bl	800146c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001622:	2360      	movs	r3, #96	@ 0x60
 8001624:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162a:	2300      	movs	r3, #0
 800162c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800162e:	2300      	movs	r3, #0
 8001630:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001642:	2200      	movs	r2, #0
 8001644:	4619      	mov	r1, r3
 8001646:	481e      	ldr	r0, [pc, #120]	@ (80016c0 <MX_TIM1_Init+0x168>)
 8001648:	f002 f938 	bl	80038bc <HAL_TIM_PWM_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001652:	f7ff ff0b 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001656:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800165a:	220c      	movs	r2, #12
 800165c:	4619      	mov	r1, r3
 800165e:	4818      	ldr	r0, [pc, #96]	@ (80016c0 <MX_TIM1_Init+0x168>)
 8001660:	f002 f92c 	bl	80038bc <HAL_TIM_PWM_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800166a:	f7ff feff 	bl	800146c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001686:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001690:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80016a4:	f002 fefc 	bl	80044a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80016ae:	f7ff fedd 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016b2:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80016b4:	f000 f8b0 	bl	8001818 <HAL_TIM_MspPostInit>

}
 80016b8:	bf00      	nop
 80016ba:	3768      	adds	r7, #104	@ 0x68
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200006e8 	.word	0x200006e8
 80016c4:	40012c00 	.word	0x40012c00

080016c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	@ 0x38
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	615a      	str	r2, [r3, #20]
 80016f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016fa:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <MX_TIM2_Init+0xe8>)
 80016fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001700:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001702:	4b2b      	ldr	r3, [pc, #172]	@ (80017b0 <MX_TIM2_Init+0xe8>)
 8001704:	224f      	movs	r2, #79	@ 0x4f
 8001706:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001708:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <MX_TIM2_Init+0xe8>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 800170e:	4b28      	ldr	r3, [pc, #160]	@ (80017b0 <MX_TIM2_Init+0xe8>)
 8001710:	2227      	movs	r2, #39	@ 0x27
 8001712:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001714:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <MX_TIM2_Init+0xe8>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171a:	4b25      	ldr	r3, [pc, #148]	@ (80017b0 <MX_TIM2_Init+0xe8>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001720:	4823      	ldr	r0, [pc, #140]	@ (80017b0 <MX_TIM2_Init+0xe8>)
 8001722:	f001 ff35 	bl	8003590 <HAL_TIM_Base_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800172c:	f7ff fe9e 	bl	800146c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001736:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800173a:	4619      	mov	r1, r3
 800173c:	481c      	ldr	r0, [pc, #112]	@ (80017b0 <MX_TIM2_Init+0xe8>)
 800173e:	f002 f9d1 	bl	8003ae4 <HAL_TIM_ConfigClockSource>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001748:	f7ff fe90 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800174c:	4818      	ldr	r0, [pc, #96]	@ (80017b0 <MX_TIM2_Init+0xe8>)
 800174e:	f001 ff76 	bl	800363e <HAL_TIM_PWM_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001758:	f7ff fe88 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4811      	ldr	r0, [pc, #68]	@ (80017b0 <MX_TIM2_Init+0xe8>)
 800176c:	f002 fe32 	bl	80043d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001776:	f7ff fe79 	bl	800146c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177a:	2360      	movs	r3, #96	@ 0x60
 800177c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800178a:	463b      	mov	r3, r7
 800178c:	2204      	movs	r2, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <MX_TIM2_Init+0xe8>)
 8001792:	f002 f893 	bl	80038bc <HAL_TIM_PWM_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800179c:	f7ff fe66 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017a0:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <MX_TIM2_Init+0xe8>)
 80017a2:	f000 f839 	bl	8001818 <HAL_TIM_MspPostInit>

}
 80017a6:	bf00      	nop
 80017a8:	3738      	adds	r7, #56	@ 0x38
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000734 	.word	0x20000734

080017b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a13      	ldr	r2, [pc, #76]	@ (8001810 <HAL_TIM_Base_MspInit+0x5c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10c      	bne.n	80017e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017c6:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <HAL_TIM_Base_MspInit+0x60>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ca:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <HAL_TIM_Base_MspInit+0x60>)
 80017cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <HAL_TIM_Base_MspInit+0x60>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017de:	e010      	b.n	8001802 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e8:	d10b      	bne.n	8001802 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <HAL_TIM_Base_MspInit+0x60>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	4a09      	ldr	r2, [pc, #36]	@ (8001814 <HAL_TIM_Base_MspInit+0x60>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <HAL_TIM_Base_MspInit+0x60>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40012c00 	.word	0x40012c00
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	@ 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a23      	ldr	r2, [pc, #140]	@ (80018c4 <HAL_TIM_MspPostInit+0xac>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d11e      	bne.n	8001878 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	4a22      	ldr	r2, [pc, #136]	@ (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001846:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8001852:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8001856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001864:	2301      	movs	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001872:	f000 fb9f 	bl	8001fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001876:	e020      	b.n	80018ba <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001880:	d11b      	bne.n	80018ba <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001886:	4a10      	ldr	r2, [pc, #64]	@ (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800189a:	2308      	movs	r3, #8
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018aa:	2301      	movs	r3, #1
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	@ (80018cc <HAL_TIM_MspPostInit+0xb4>)
 80018b6:	f000 fb7d 	bl	8001fb4 <HAL_GPIO_Init>
}
 80018ba:	bf00      	nop
 80018bc:	3728      	adds	r7, #40	@ 0x28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40012c00 	.word	0x40012c00
 80018c8:	40021000 	.word	0x40021000
 80018cc:	48000400 	.word	0x48000400

080018d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018d4:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <MX_USART1_UART_Init+0x58>)
 80018d6:	4a15      	ldr	r2, [pc, #84]	@ (800192c <MX_USART1_UART_Init+0x5c>)
 80018d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 256000;
 80018da:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <MX_USART1_UART_Init+0x58>)
 80018dc:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 80018e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_USART1_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <MX_USART1_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_USART1_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_USART1_UART_Init+0x58>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <MX_USART1_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_USART1_UART_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <MX_USART1_UART_Init+0x58>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <MX_USART1_UART_Init+0x58>)
 800190e:	2200      	movs	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_USART1_UART_Init+0x58>)
 8001914:	f002 fe3c 	bl	8004590 <HAL_UART_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800191e:	f7ff fda5 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000780 	.word	0x20000780
 800192c:	40013800 	.word	0x40013800

08001930 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b09e      	sub	sp, #120	@ 0x78
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	2254      	movs	r2, #84	@ 0x54
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f004 fb8b 	bl	800606c <memset>
  if(uartHandle->Instance==USART1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a23      	ldr	r2, [pc, #140]	@ (80019e8 <HAL_UART_MspInit+0xb8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d13f      	bne.n	80019e0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001960:	2301      	movs	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001964:	2300      	movs	r3, #0
 8001966:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	4618      	mov	r0, r3
 800196e:	f001 fb27 	bl	8002fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001978:	f7ff fd78 	bl	800146c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800197c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_UART_MspInit+0xbc>)
 800197e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001980:	4a1a      	ldr	r2, [pc, #104]	@ (80019ec <HAL_UART_MspInit+0xbc>)
 8001982:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001986:	6613      	str	r3, [r2, #96]	@ 0x60
 8001988:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <HAL_UART_MspInit+0xbc>)
 800198a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001994:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_UART_MspInit+0xbc>)
 8001996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001998:	4a14      	ldr	r2, [pc, #80]	@ (80019ec <HAL_UART_MspInit+0xbc>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_UART_MspInit+0xbc>)
 80019a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019ac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019be:	2307      	movs	r3, #7
 80019c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019c6:	4619      	mov	r1, r3
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019cc:	f000 faf2 	bl	8001fb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	2025      	movs	r0, #37	@ 0x25
 80019d6:	f000 f9a8 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019da:	2025      	movs	r0, #37	@ 0x25
 80019dc:	f000 f9c1 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019e0:	bf00      	nop
 80019e2:	3778      	adds	r7, #120	@ 0x78
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40013800 	.word	0x40013800
 80019ec:	40021000 	.word	0x40021000

080019f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019f4:	f7ff fd9e 	bl	8001534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f8:	480c      	ldr	r0, [pc, #48]	@ (8001a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80019fa:	490d      	ldr	r1, [pc, #52]	@ (8001a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a34 <LoopForever+0xe>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a00:	e002      	b.n	8001a08 <LoopCopyDataInit>

08001a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a06:	3304      	adds	r3, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a0c:	d3f9      	bcc.n	8001a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a10:	4c0a      	ldr	r4, [pc, #40]	@ (8001a3c <LoopForever+0x16>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a14:	e001      	b.n	8001a1a <LoopFillZerobss>

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a18:	3204      	adds	r2, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f004 fb2d 	bl	800607c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a22:	f7ff fb79 	bl	8001118 <main>

08001a26 <LoopForever>:

LoopForever:
    b LoopForever
 8001a26:	e7fe      	b.n	8001a26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a28:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a34:	08006134 	.word	0x08006134
  ldr r2, =_sbss
 8001a38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a3c:	2000080c 	.word	0x2000080c

08001a40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC1_IRQHandler>

08001a42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 f961 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a52:	200f      	movs	r0, #15
 8001a54:	f000 f80e 	bl	8001a74 <HAL_InitTick>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	71fb      	strb	r3, [r7, #7]
 8001a62:	e001      	b.n	8001a68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a64:	f7ff fd08 	bl	8001478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a80:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <HAL_InitTick+0x6c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d023      	beq.n	8001ad0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <HAL_InitTick+0x70>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <HAL_InitTick+0x6c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f96d 	bl	8001d7e <HAL_SYSTICK_Config>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d809      	bhi.n	8001ac4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f937 	bl	8001d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001abc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_InitTick+0x74>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e007      	b.n	8001ad4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e004      	b.n	8001ad4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e001      	b.n	8001ad4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_IncTick+0x20>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_IncTick+0x24>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <HAL_IncTick+0x24>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	20000808 	.word	0x20000808

08001b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000808 	.word	0x20000808

08001b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff ffee 	bl	8001b14 <HAL_GetTick>
 8001b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d005      	beq.n	8001b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <HAL_Delay+0x44>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b52:	bf00      	nop
 8001b54:	f7ff ffde 	bl	8001b14 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8f7      	bhi.n	8001b54 <HAL_Delay+0x28>
  {
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4907      	ldr	r1, [pc, #28]	@ (8001c10 <__NVIC_EnableIRQ+0x38>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	@ (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	@ (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff8e 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff29 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff3e 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff8e 	bl	8001c68 <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5d 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff31 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffa2 	bl	8001cd0 <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_DMA_Start_IT+0x20>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e04b      	b.n	8001e4e <HAL_DMA_Start_IT+0xb8>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d13a      	bne.n	8001e40 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f8b0 	bl	8001f54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 020e 	orr.w	r2, r2, #14
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e00f      	b.n	8001e2e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0204 	bic.w	r2, r2, #4
 8001e1c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 020a 	orr.w	r2, r2, #10
 8001e2c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e005      	b.n	8001e4c <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b085      	sub	sp, #20
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d008      	beq.n	8001e80 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2204      	movs	r2, #4
 8001e72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e022      	b.n	8001ec6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 020e 	bic.w	r2, r2, #14
 8001e8e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea4:	f003 021c 	and.w	r2, r3, #28
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d005      	beq.n	8001ef6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2204      	movs	r2, #4
 8001eee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	e029      	b.n	8001f4a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 020e 	bic.w	r2, r2, #14
 8001f04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f003 021c 	and.w	r2, r3, #28
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f202 	lsl.w	r2, r1, r2
 8001f28:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
    }
  }
  return status;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	f003 021c 	and.w	r2, r3, #28
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f202 	lsl.w	r2, r1, r2
 8001f74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b10      	cmp	r3, #16
 8001f84:	d108      	bne.n	8001f98 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f96:	e007      	b.n	8001fa8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	60da      	str	r2, [r3, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc2:	e148      	b.n	8002256 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2101      	movs	r1, #1
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 813a 	beq.w	8002250 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d005      	beq.n	8001ff4 <HAL_GPIO_Init+0x40>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d130      	bne.n	8002056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800202a:	2201      	movs	r2, #1
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	f003 0201 	and.w	r2, r3, #1
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b03      	cmp	r3, #3
 8002060:	d017      	beq.n	8002092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2203      	movs	r2, #3
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d123      	bne.n	80020e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	6939      	ldr	r1, [r7, #16]
 80020e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0203 	and.w	r2, r3, #3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8094 	beq.w	8002250 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002128:	4b52      	ldr	r3, [pc, #328]	@ (8002274 <HAL_GPIO_Init+0x2c0>)
 800212a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212c:	4a51      	ldr	r2, [pc, #324]	@ (8002274 <HAL_GPIO_Init+0x2c0>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6613      	str	r3, [r2, #96]	@ 0x60
 8002134:	4b4f      	ldr	r3, [pc, #316]	@ (8002274 <HAL_GPIO_Init+0x2c0>)
 8002136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002140:	4a4d      	ldr	r2, [pc, #308]	@ (8002278 <HAL_GPIO_Init+0x2c4>)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	3302      	adds	r3, #2
 8002148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800216a:	d00d      	beq.n	8002188 <HAL_GPIO_Init+0x1d4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a43      	ldr	r2, [pc, #268]	@ (800227c <HAL_GPIO_Init+0x2c8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d007      	beq.n	8002184 <HAL_GPIO_Init+0x1d0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a42      	ldr	r2, [pc, #264]	@ (8002280 <HAL_GPIO_Init+0x2cc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_GPIO_Init+0x1cc>
 800217c:	2302      	movs	r3, #2
 800217e:	e004      	b.n	800218a <HAL_GPIO_Init+0x1d6>
 8002180:	2307      	movs	r3, #7
 8002182:	e002      	b.n	800218a <HAL_GPIO_Init+0x1d6>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_GPIO_Init+0x1d6>
 8002188:	2300      	movs	r3, #0
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	f002 0203 	and.w	r2, r2, #3
 8002190:	0092      	lsls	r2, r2, #2
 8002192:	4093      	lsls	r3, r2
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800219a:	4937      	ldr	r1, [pc, #220]	@ (8002278 <HAL_GPIO_Init+0x2c4>)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a8:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021f6:	4a23      	ldr	r2, [pc, #140]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021fc:	4b21      	ldr	r3, [pc, #132]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002220:	4a18      	ldr	r2, [pc, #96]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800224a:	4a0e      	ldr	r2, [pc, #56]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	3301      	adds	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f aeaf 	bne.w	8001fc4 <HAL_GPIO_Init+0x10>
  }
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	371c      	adds	r7, #28
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40021000 	.word	0x40021000
 8002278:	40010000 	.word	0x40010000
 800227c:	48000400 	.word	0x48000400
 8002280:	48000800 	.word	0x48000800
 8002284:	40010400 	.word	0x40010400

08002288 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800228c:	4b04      	ldr	r3, [pc, #16]	@ (80022a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40007000 	.word	0x40007000

080022a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022b2:	d130      	bne.n	8002316 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b4:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022c0:	d038      	beq.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002348 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2232      	movs	r2, #50	@ 0x32
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	4a1b      	ldr	r2, [pc, #108]	@ (800234c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	3301      	adds	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e8:	e002      	b.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022fc:	d102      	bne.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f2      	bne.n	80022ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002304:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002310:	d110      	bne.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e00f      	b.n	8002336 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002316:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800231e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002322:	d007      	beq.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002324:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800232c:	4a05      	ldr	r2, [pc, #20]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002332:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40007000 	.word	0x40007000
 8002348:	20000000 	.word	0x20000000
 800234c:	431bde83 	.word	0x431bde83

08002350 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	f000 bc02 	b.w	8002b68 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002364:	4b96      	ldr	r3, [pc, #600]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236e:	4b94      	ldr	r3, [pc, #592]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80e4 	beq.w	800254e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_RCC_OscConfig+0x4c>
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	f040 808b 	bne.w	80024aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b01      	cmp	r3, #1
 8002398:	f040 8087 	bne.w	80024aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800239c:	4b88      	ldr	r3, [pc, #544]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_OscConfig+0x64>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e3d9      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1a      	ldr	r2, [r3, #32]
 80023b8:	4b81      	ldr	r3, [pc, #516]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d004      	beq.n	80023ce <HAL_RCC_OscConfig+0x7e>
 80023c4:	4b7e      	ldr	r3, [pc, #504]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023cc:	e005      	b.n	80023da <HAL_RCC_OscConfig+0x8a>
 80023ce:	4b7c      	ldr	r3, [pc, #496]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023da:	4293      	cmp	r3, r2
 80023dc:	d223      	bcs.n	8002426 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fd8c 	bl	8002f00 <RCC_SetFlashLatencyFromMSIRange>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e3ba      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f2:	4b73      	ldr	r3, [pc, #460]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a72      	ldr	r2, [pc, #456]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023f8:	f043 0308 	orr.w	r3, r3, #8
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b70      	ldr	r3, [pc, #448]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	496d      	ldr	r1, [pc, #436]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 800240c:	4313      	orrs	r3, r2
 800240e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002410:	4b6b      	ldr	r3, [pc, #428]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	4968      	ldr	r1, [pc, #416]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
 8002424:	e025      	b.n	8002472 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002426:	4b66      	ldr	r3, [pc, #408]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a65      	ldr	r2, [pc, #404]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b63      	ldr	r3, [pc, #396]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4960      	ldr	r1, [pc, #384]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002444:	4b5e      	ldr	r3, [pc, #376]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	495b      	ldr	r1, [pc, #364]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fd4c 	bl	8002f00 <RCC_SetFlashLatencyFromMSIRange>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e37a      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002472:	f000 fc81 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8002476:	4602      	mov	r2, r0
 8002478:	4b51      	ldr	r3, [pc, #324]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	4950      	ldr	r1, [pc, #320]	@ (80025c4 <HAL_RCC_OscConfig+0x274>)
 8002484:	5ccb      	ldrb	r3, [r1, r3]
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	4a4e      	ldr	r2, [pc, #312]	@ (80025c8 <HAL_RCC_OscConfig+0x278>)
 8002490:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002492:	4b4e      	ldr	r3, [pc, #312]	@ (80025cc <HAL_RCC_OscConfig+0x27c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff faec 	bl	8001a74 <HAL_InitTick>
 800249c:	4603      	mov	r3, r0
 800249e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d052      	beq.n	800254c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	e35e      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d032      	beq.n	8002518 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024b2:	4b43      	ldr	r3, [pc, #268]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a42      	ldr	r2, [pc, #264]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024be:	f7ff fb29 	bl	8001b14 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c6:	f7ff fb25 	bl	8001b14 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e347      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d8:	4b39      	ldr	r3, [pc, #228]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024e4:	4b36      	ldr	r3, [pc, #216]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a35      	ldr	r2, [pc, #212]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024ea:	f043 0308 	orr.w	r3, r3, #8
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b33      	ldr	r3, [pc, #204]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4930      	ldr	r1, [pc, #192]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002502:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	492b      	ldr	r1, [pc, #172]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
 8002516:	e01a      	b.n	800254e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002518:	4b29      	ldr	r3, [pc, #164]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a28      	ldr	r2, [pc, #160]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002524:	f7ff faf6 	bl	8001b14 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800252c:	f7ff faf2 	bl	8001b14 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e314      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800253e:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x1dc>
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800254c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d073      	beq.n	8002642 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d005      	beq.n	800256c <HAL_RCC_OscConfig+0x21c>
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d10e      	bne.n	8002584 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d10b      	bne.n	8002584 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d063      	beq.n	8002640 <HAL_RCC_OscConfig+0x2f0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d15f      	bne.n	8002640 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e2f1      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800258c:	d106      	bne.n	800259c <HAL_RCC_OscConfig+0x24c>
 800258e:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a0b      	ldr	r2, [pc, #44]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e025      	b.n	80025e8 <HAL_RCC_OscConfig+0x298>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025a4:	d114      	bne.n	80025d0 <HAL_RCC_OscConfig+0x280>
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a05      	ldr	r2, [pc, #20]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80025ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a02      	ldr	r2, [pc, #8]	@ (80025c0 <HAL_RCC_OscConfig+0x270>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e013      	b.n	80025e8 <HAL_RCC_OscConfig+0x298>
 80025c0:	40021000 	.word	0x40021000
 80025c4:	080060dc 	.word	0x080060dc
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000004 	.word	0x20000004
 80025d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a9f      	ldr	r2, [pc, #636]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80025d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b9d      	ldr	r3, [pc, #628]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a9c      	ldr	r2, [pc, #624]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7ff fa90 	bl	8001b14 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7ff fa8c 	bl	8001b14 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	@ 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e2ae      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260a:	4b92      	ldr	r3, [pc, #584]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x2a8>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7ff fa7c 	bl	8001b14 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002620:	f7ff fa78 	bl	8001b14 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	@ 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e29a      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002632:	4b88      	ldr	r3, [pc, #544]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x2d0>
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d060      	beq.n	8002710 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d005      	beq.n	8002660 <HAL_RCC_OscConfig+0x310>
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b0c      	cmp	r3, #12
 8002658:	d119      	bne.n	800268e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d116      	bne.n	800268e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002660:	4b7c      	ldr	r3, [pc, #496]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_OscConfig+0x328>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e277      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b76      	ldr	r3, [pc, #472]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	4973      	ldr	r1, [pc, #460]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800268c:	e040      	b.n	8002710 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d023      	beq.n	80026de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002696:	4b6f      	ldr	r3, [pc, #444]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6e      	ldr	r2, [pc, #440]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7ff fa37 	bl	8001b14 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026aa:	f7ff fa33 	bl	8001b14 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e255      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026bc:	4b65      	ldr	r3, [pc, #404]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b62      	ldr	r3, [pc, #392]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	495f      	ldr	r1, [pc, #380]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
 80026dc:	e018      	b.n	8002710 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026de:	4b5d      	ldr	r3, [pc, #372]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80026e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7ff fa13 	bl	8001b14 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f2:	f7ff fa0f 	bl	8001b14 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e231      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002704:	4b53      	ldr	r3, [pc, #332]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d03c      	beq.n	8002796 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01c      	beq.n	800275e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002724:	4b4b      	ldr	r3, [pc, #300]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800272a:	4a4a      	ldr	r2, [pc, #296]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7ff f9ee 	bl	8001b14 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff f9ea 	bl	8001b14 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e20c      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800274e:	4b41      	ldr	r3, [pc, #260]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ef      	beq.n	800273c <HAL_RCC_OscConfig+0x3ec>
 800275c:	e01b      	b.n	8002796 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275e:	4b3d      	ldr	r3, [pc, #244]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002760:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002764:	4a3b      	ldr	r2, [pc, #236]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7ff f9d1 	bl	8001b14 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002776:	f7ff f9cd 	bl	8001b14 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1ef      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002788:	4b32      	ldr	r3, [pc, #200]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 800278a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ef      	bne.n	8002776 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80a6 	beq.w	80028f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	4b27      	ldr	r3, [pc, #156]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b8:	4a26      	ldr	r2, [pc, #152]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027be:	6593      	str	r3, [r2, #88]	@ 0x58
 80027c0:	4b24      	ldr	r3, [pc, #144]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027cc:	2301      	movs	r3, #1
 80027ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d0:	4b21      	ldr	r3, [pc, #132]	@ (8002858 <HAL_RCC_OscConfig+0x508>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d118      	bne.n	800280e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <HAL_RCC_OscConfig+0x508>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002858 <HAL_RCC_OscConfig+0x508>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e8:	f7ff f994 	bl	8001b14 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7ff f990 	bl	8001b14 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e1b2      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002802:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <HAL_RCC_OscConfig+0x508>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d108      	bne.n	8002828 <HAL_RCC_OscConfig+0x4d8>
 8002816:	4b0f      	ldr	r3, [pc, #60]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281c:	4a0d      	ldr	r2, [pc, #52]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002826:	e029      	b.n	800287c <HAL_RCC_OscConfig+0x52c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b05      	cmp	r3, #5
 800282e:	d115      	bne.n	800285c <HAL_RCC_OscConfig+0x50c>
 8002830:	4b08      	ldr	r3, [pc, #32]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002836:	4a07      	ldr	r2, [pc, #28]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002840:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	4a03      	ldr	r2, [pc, #12]	@ (8002854 <HAL_RCC_OscConfig+0x504>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002850:	e014      	b.n	800287c <HAL_RCC_OscConfig+0x52c>
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	40007000 	.word	0x40007000
 800285c:	4b9a      	ldr	r3, [pc, #616]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002862:	4a99      	ldr	r2, [pc, #612]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800286c:	4b96      	ldr	r3, [pc, #600]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002872:	4a95      	ldr	r2, [pc, #596]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002874:	f023 0304 	bic.w	r3, r3, #4
 8002878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d016      	beq.n	80028b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7ff f946 	bl	8001b14 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7ff f942 	bl	8001b14 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e162      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a2:	4b89      	ldr	r3, [pc, #548]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ed      	beq.n	800288c <HAL_RCC_OscConfig+0x53c>
 80028b0:	e015      	b.n	80028de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7ff f92f 	bl	8001b14 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7ff f92b 	bl	8001b14 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e14b      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d0:	4b7d      	ldr	r3, [pc, #500]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ed      	bne.n	80028ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028de:	7ffb      	ldrb	r3, [r7, #31]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e4:	4b78      	ldr	r3, [pc, #480]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e8:	4a77      	ldr	r2, [pc, #476]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 80028ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d03c      	beq.n	8002976 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01c      	beq.n	800293e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002904:	4b70      	ldr	r3, [pc, #448]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002906:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800290a:	4a6f      	ldr	r2, [pc, #444]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7ff f8fe 	bl	8001b14 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800291c:	f7ff f8fa 	bl	8001b14 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e11c      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800292e:	4b66      	ldr	r3, [pc, #408]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002930:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ef      	beq.n	800291c <HAL_RCC_OscConfig+0x5cc>
 800293c:	e01b      	b.n	8002976 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800293e:	4b62      	ldr	r3, [pc, #392]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002940:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002944:	4a60      	ldr	r2, [pc, #384]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7ff f8e1 	bl	8001b14 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002956:	f7ff f8dd 	bl	8001b14 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e0ff      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002968:	4b57      	ldr	r3, [pc, #348]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 800296a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1ef      	bne.n	8002956 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80f3 	beq.w	8002b66 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	2b02      	cmp	r3, #2
 8002986:	f040 80c9 	bne.w	8002b1c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800298a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 0203 	and.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299a:	429a      	cmp	r2, r3
 800299c:	d12c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	3b01      	subs	r3, #1
 80029aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d123      	bne.n	80029f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d11b      	bne.n	80029f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d113      	bne.n	80029f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	3b01      	subs	r3, #1
 80029de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d109      	bne.n	80029f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	3b01      	subs	r3, #1
 80029f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d06b      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d062      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029fe:	4b32      	ldr	r3, [pc, #200]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0ac      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a2d      	ldr	r2, [pc, #180]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002a14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a1a:	f7ff f87b 	bl	8001b14 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7ff f877 	bl	8001b14 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e099      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a34:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a40:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <HAL_RCC_OscConfig+0x77c>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a50:	3a01      	subs	r2, #1
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	4311      	orrs	r1, r2
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a5a:	0212      	lsls	r2, r2, #8
 8002a5c:	4311      	orrs	r1, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a62:	0852      	lsrs	r2, r2, #1
 8002a64:	3a01      	subs	r2, #1
 8002a66:	0552      	lsls	r2, r2, #21
 8002a68:	4311      	orrs	r1, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a6e:	0852      	lsrs	r2, r2, #1
 8002a70:	3a01      	subs	r2, #1
 8002a72:	0652      	lsls	r2, r2, #25
 8002a74:	4311      	orrs	r1, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a7a:	06d2      	lsls	r2, r2, #27
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	4912      	ldr	r1, [pc, #72]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a84:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0f      	ldr	r2, [pc, #60]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a90:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002a96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a9c:	f7ff f83a 	bl	8001b14 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7ff f836 	bl	8001b14 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e058      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab6:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <HAL_RCC_OscConfig+0x778>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac2:	e050      	b.n	8002b66 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e04f      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad0:	4b27      	ldr	r3, [pc, #156]	@ (8002b70 <HAL_RCC_OscConfig+0x820>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d144      	bne.n	8002b66 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002adc:	4b24      	ldr	r3, [pc, #144]	@ (8002b70 <HAL_RCC_OscConfig+0x820>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a23      	ldr	r2, [pc, #140]	@ (8002b70 <HAL_RCC_OscConfig+0x820>)
 8002ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ae6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ae8:	4b21      	ldr	r3, [pc, #132]	@ (8002b70 <HAL_RCC_OscConfig+0x820>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a20      	ldr	r2, [pc, #128]	@ (8002b70 <HAL_RCC_OscConfig+0x820>)
 8002aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002af2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002af4:	f7ff f80e 	bl	8001b14 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7ff f80a 	bl	8001b14 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e02c      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <HAL_RCC_OscConfig+0x820>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x7ac>
 8002b1a:	e024      	b.n	8002b66 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d01f      	beq.n	8002b62 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <HAL_RCC_OscConfig+0x820>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a12      	ldr	r2, [pc, #72]	@ (8002b70 <HAL_RCC_OscConfig+0x820>)
 8002b28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fff1 	bl	8001b14 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe ffed 	bl	8001b14 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e00f      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b48:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <HAL_RCC_OscConfig+0x820>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002b54:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_RCC_OscConfig+0x820>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4905      	ldr	r1, [pc, #20]	@ (8002b70 <HAL_RCC_OscConfig+0x820>)
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
 8002b60:	e001      	b.n	8002b66 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000
 8002b74:	feeefffc 	.word	0xfeeefffc

08002b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0e7      	b.n	8002d5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b8c:	4b75      	ldr	r3, [pc, #468]	@ (8002d64 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d910      	bls.n	8002bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	4b72      	ldr	r3, [pc, #456]	@ (8002d64 <HAL_RCC_ClockConfig+0x1ec>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 0207 	bic.w	r2, r3, #7
 8002ba2:	4970      	ldr	r1, [pc, #448]	@ (8002d64 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b6e      	ldr	r3, [pc, #440]	@ (8002d64 <HAL_RCC_ClockConfig+0x1ec>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0cf      	b.n	8002d5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d010      	beq.n	8002bea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	4b66      	ldr	r3, [pc, #408]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d908      	bls.n	8002bea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd8:	4b63      	ldr	r3, [pc, #396]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4960      	ldr	r1, [pc, #384]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d04c      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfe:	4b5a      	ldr	r3, [pc, #360]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d121      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e0a6      	b.n	8002d5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c16:	4b54      	ldr	r3, [pc, #336]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d115      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e09a      	b.n	8002d5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e08e      	b.n	8002d5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e086      	b.n	8002d5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c4e:	4b46      	ldr	r3, [pc, #280]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f023 0203 	bic.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4943      	ldr	r1, [pc, #268]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c60:	f7fe ff58 	bl	8001b14 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	f7fe ff54 	bl	8001b14 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e06e      	b.n	8002d5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 020c 	and.w	r2, r3, #12
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d1eb      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d010      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	4b31      	ldr	r3, [pc, #196]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d208      	bcs.n	8002cbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cac:	4b2e      	ldr	r3, [pc, #184]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	492b      	ldr	r1, [pc, #172]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbe:	4b29      	ldr	r3, [pc, #164]	@ (8002d64 <HAL_RCC_ClockConfig+0x1ec>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d210      	bcs.n	8002cee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ccc:	4b25      	ldr	r3, [pc, #148]	@ (8002d64 <HAL_RCC_ClockConfig+0x1ec>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 0207 	bic.w	r2, r3, #7
 8002cd4:	4923      	ldr	r1, [pc, #140]	@ (8002d64 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cdc:	4b21      	ldr	r3, [pc, #132]	@ (8002d64 <HAL_RCC_ClockConfig+0x1ec>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e036      	b.n	8002d5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4918      	ldr	r1, [pc, #96]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d18:	4b13      	ldr	r3, [pc, #76]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4910      	ldr	r1, [pc, #64]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d2c:	f000 f824 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b0d      	ldr	r3, [pc, #52]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f0>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	490b      	ldr	r1, [pc, #44]	@ (8002d6c <HAL_RCC_ClockConfig+0x1f4>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
 8002d48:	4a09      	ldr	r2, [pc, #36]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d4c:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <HAL_RCC_ClockConfig+0x1fc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe fe8f 	bl	8001a74 <HAL_InitTick>
 8002d56:	4603      	mov	r3, r0
 8002d58:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d5a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40022000 	.word	0x40022000
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	080060dc 	.word	0x080060dc
 8002d70:	20000000 	.word	0x20000000
 8002d74:	20000004 	.word	0x20000004

08002d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	@ 0x24
 8002d7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d86:	4b3e      	ldr	r3, [pc, #248]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d90:	4b3b      	ldr	r3, [pc, #236]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x34>
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d121      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d11e      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dac:	4b34      	ldr	r3, [pc, #208]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002db8:	4b31      	ldr	r3, [pc, #196]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	e005      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ddc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10d      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002df0:	4b25      	ldr	r3, [pc, #148]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002df2:	61bb      	str	r3, [r7, #24]
 8002df4:	e004      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dfc:	4b23      	ldr	r3, [pc, #140]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002dfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d134      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e06:	4b1e      	ldr	r3, [pc, #120]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d003      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d003      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0xac>
 8002e1c:	e005      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e20:	617b      	str	r3, [r7, #20]
      break;
 8002e22:	e005      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e24:	4b19      	ldr	r3, [pc, #100]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002e26:	617b      	str	r3, [r7, #20]
      break;
 8002e28:	e002      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	617b      	str	r3, [r7, #20]
      break;
 8002e2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e30:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	fb03 f202 	mul.w	r2, r3, r2
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e56:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	0e5b      	lsrs	r3, r3, #25
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	3301      	adds	r3, #1
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e70:	69bb      	ldr	r3, [r7, #24]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3724      	adds	r7, #36	@ 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	080060f4 	.word	0x080060f4
 8002e88:	00f42400 	.word	0x00f42400
 8002e8c:	007a1200 	.word	0x007a1200

08002e90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e94:	4b03      	ldr	r3, [pc, #12]	@ (8002ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000000 	.word	0x20000000

08002ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002eac:	f7ff fff0 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4904      	ldr	r1, [pc, #16]	@ (8002ed0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	080060ec 	.word	0x080060ec

08002ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ed8:	f7ff ffda 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002edc:	4602      	mov	r2, r0
 8002ede:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	0adb      	lsrs	r3, r3, #11
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	4904      	ldr	r1, [pc, #16]	@ (8002efc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eea:	5ccb      	ldrb	r3, [r1, r3]
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	080060ec 	.word	0x080060ec

08002f00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f18:	f7ff f9b6 	bl	8002288 <HAL_PWREx_GetVoltageRange>
 8002f1c:	6178      	str	r0, [r7, #20]
 8002f1e:	e014      	b.n	8002f4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f20:	4b25      	ldr	r3, [pc, #148]	@ (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f24:	4a24      	ldr	r2, [pc, #144]	@ (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f2c:	4b22      	ldr	r3, [pc, #136]	@ (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f38:	f7ff f9a6 	bl	8002288 <HAL_PWREx_GetVoltageRange>
 8002f3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f42:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f50:	d10b      	bne.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b80      	cmp	r3, #128	@ 0x80
 8002f56:	d919      	bls.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f5c:	d902      	bls.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f5e:	2302      	movs	r3, #2
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	e013      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f64:	2301      	movs	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	e010      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b80      	cmp	r3, #128	@ 0x80
 8002f6e:	d902      	bls.n	8002f76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f70:	2303      	movs	r3, #3
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	e00a      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b80      	cmp	r3, #128	@ 0x80
 8002f7a:	d102      	bne.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	e004      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b70      	cmp	r3, #112	@ 0x70
 8002f86:	d101      	bne.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f88:	2301      	movs	r3, #1
 8002f8a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 0207 	bic.w	r2, r3, #7
 8002f94:	4909      	ldr	r1, [pc, #36]	@ (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f9c:	4b07      	ldr	r3, [pc, #28]	@ (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40022000 	.word	0x40022000

08002fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fc8:	2300      	movs	r3, #0
 8002fca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fcc:	2300      	movs	r3, #0
 8002fce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d031      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fe4:	d01a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002fe6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fea:	d814      	bhi.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ff0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ff4:	d10f      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	4a5c      	ldr	r2, [pc, #368]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003000:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003002:	e00c      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f9ce 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003014:	e003      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	74fb      	strb	r3, [r7, #19]
      break;
 800301a:	e000      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800301c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003024:	4b51      	ldr	r3, [pc, #324]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003032:	494e      	ldr	r1, [pc, #312]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800303a:	e001      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 809e 	beq.w	800318a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304e:	2300      	movs	r3, #0
 8003050:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003052:	4b46      	ldr	r3, [pc, #280]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003062:	2300      	movs	r3, #0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00d      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	4b40      	ldr	r3, [pc, #256]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306c:	4a3f      	ldr	r2, [pc, #252]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003072:	6593      	str	r3, [r2, #88]	@ 0x58
 8003074:	4b3d      	ldr	r3, [pc, #244]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003080:	2301      	movs	r3, #1
 8003082:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003084:	4b3a      	ldr	r3, [pc, #232]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a39      	ldr	r2, [pc, #228]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800308a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800308e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003090:	f7fe fd40 	bl	8001b14 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003096:	e009      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003098:	f7fe fd3c 	bl	8001b14 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d902      	bls.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	74fb      	strb	r3, [r7, #19]
        break;
 80030aa:	e005      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030ac:	4b30      	ldr	r3, [pc, #192]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ef      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d15a      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030be:	4b2b      	ldr	r3, [pc, #172]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01e      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d019      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030da:	4b24      	ldr	r3, [pc, #144]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030e6:	4b21      	ldr	r3, [pc, #132]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ec:	4a1f      	ldr	r2, [pc, #124]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030f6:	4b1d      	ldr	r3, [pc, #116]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fc:	4a1b      	ldr	r2, [pc, #108]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003102:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003106:	4a19      	ldr	r2, [pc, #100]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d016      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe fcfc 	bl	8001b14 <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311e:	e00b      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003120:	f7fe fcf8 	bl	8001b14 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d902      	bls.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	74fb      	strb	r3, [r7, #19]
            break;
 8003136:	e006      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0ec      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800314c:	4b07      	ldr	r3, [pc, #28]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003152:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315a:	4904      	ldr	r1, [pc, #16]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003162:	e009      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	74bb      	strb	r3, [r7, #18]
 8003168:	e006      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003178:	7c7b      	ldrb	r3, [r7, #17]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317e:	4b8a      	ldr	r3, [pc, #552]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003182:	4a89      	ldr	r2, [pc, #548]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003184:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003188:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003196:	4b84      	ldr	r3, [pc, #528]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319c:	f023 0203 	bic.w	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4980      	ldr	r1, [pc, #512]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b8:	4b7b      	ldr	r3, [pc, #492]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031be:	f023 020c 	bic.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	4978      	ldr	r1, [pc, #480]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031da:	4b73      	ldr	r3, [pc, #460]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e8:	496f      	ldr	r1, [pc, #444]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031fc:	4b6a      	ldr	r3, [pc, #424]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003202:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320a:	4967      	ldr	r1, [pc, #412]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800321e:	4b62      	ldr	r3, [pc, #392]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003224:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322c:	495e      	ldr	r1, [pc, #376]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003240:	4b59      	ldr	r3, [pc, #356]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003246:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324e:	4956      	ldr	r1, [pc, #344]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003262:	4b51      	ldr	r3, [pc, #324]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003268:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	494d      	ldr	r1, [pc, #308]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d028      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003284:	4b48      	ldr	r3, [pc, #288]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	4945      	ldr	r1, [pc, #276]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032a2:	d106      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a4:	4b40      	ldr	r3, [pc, #256]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4a3f      	ldr	r2, [pc, #252]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032ae:	60d3      	str	r3, [r2, #12]
 80032b0:	e011      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032ba:	d10c      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	2101      	movs	r1, #1
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f872 	bl	80033ac <RCCEx_PLLSAI1_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d028      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032e2:	4b31      	ldr	r3, [pc, #196]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f0:	492d      	ldr	r1, [pc, #180]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003300:	d106      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003302:	4b29      	ldr	r3, [pc, #164]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4a28      	ldr	r2, [pc, #160]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003308:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800330c:	60d3      	str	r3, [r2, #12]
 800330e:	e011      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003314:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003318:	d10c      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3304      	adds	r3, #4
 800331e:	2101      	movs	r1, #1
 8003320:	4618      	mov	r0, r3
 8003322:	f000 f843 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01c      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003340:	4b19      	ldr	r3, [pc, #100]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003346:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334e:	4916      	ldr	r1, [pc, #88]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800335e:	d10c      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	2102      	movs	r1, #2
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f820 	bl	80033ac <RCCEx_PLLSAI1_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003386:	4b08      	ldr	r3, [pc, #32]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003394:	4904      	ldr	r1, [pc, #16]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800339c:	7cbb      	ldrb	r3, [r7, #18]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000

080033ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ba:	4b74      	ldr	r3, [pc, #464]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d018      	beq.n	80033f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033c6:	4b71      	ldr	r3, [pc, #452]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0203 	and.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10d      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
       ||
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033de:	4b6b      	ldr	r3, [pc, #428]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
       ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d047      	beq.n	8003482 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	e044      	b.n	8003482 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d018      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0x86>
 8003400:	2b03      	cmp	r3, #3
 8003402:	d825      	bhi.n	8003450 <RCCEx_PLLSAI1_Config+0xa4>
 8003404:	2b01      	cmp	r3, #1
 8003406:	d002      	beq.n	800340e <RCCEx_PLLSAI1_Config+0x62>
 8003408:	2b02      	cmp	r3, #2
 800340a:	d009      	beq.n	8003420 <RCCEx_PLLSAI1_Config+0x74>
 800340c:	e020      	b.n	8003450 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800340e:	4b5f      	ldr	r3, [pc, #380]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11d      	bne.n	8003456 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800341e:	e01a      	b.n	8003456 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003420:	4b5a      	ldr	r3, [pc, #360]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d116      	bne.n	800345a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003430:	e013      	b.n	800345a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003432:	4b56      	ldr	r3, [pc, #344]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800343e:	4b53      	ldr	r3, [pc, #332]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800344e:	e006      	b.n	800345e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      break;
 8003454:	e004      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003456:	bf00      	nop
 8003458:	e002      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800345a:	bf00      	nop
 800345c:	e000      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800345e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003466:	4b49      	ldr	r3, [pc, #292]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	430b      	orrs	r3, r1
 800347c:	4943      	ldr	r1, [pc, #268]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 800347e:	4313      	orrs	r3, r2
 8003480:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d17c      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003488:	4b40      	ldr	r3, [pc, #256]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3f      	ldr	r2, [pc, #252]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 800348e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003494:	f7fe fb3e 	bl	8001b14 <HAL_GetTick>
 8003498:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800349a:	e009      	b.n	80034b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800349c:	f7fe fb3a 	bl	8001b14 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d902      	bls.n	80034b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	73fb      	strb	r3, [r7, #15]
        break;
 80034ae:	e005      	b.n	80034bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b0:	4b36      	ldr	r3, [pc, #216]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ef      	bne.n	800349c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d15f      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d110      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034c8:	4b30      	ldr	r3, [pc, #192]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80034d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6892      	ldr	r2, [r2, #8]
 80034d8:	0211      	lsls	r1, r2, #8
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68d2      	ldr	r2, [r2, #12]
 80034de:	06d2      	lsls	r2, r2, #27
 80034e0:	430a      	orrs	r2, r1
 80034e2:	492a      	ldr	r1, [pc, #168]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	610b      	str	r3, [r1, #16]
 80034e8:	e027      	b.n	800353a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d112      	bne.n	8003516 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034f0:	4b26      	ldr	r3, [pc, #152]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80034f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6892      	ldr	r2, [r2, #8]
 8003500:	0211      	lsls	r1, r2, #8
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6912      	ldr	r2, [r2, #16]
 8003506:	0852      	lsrs	r2, r2, #1
 8003508:	3a01      	subs	r2, #1
 800350a:	0552      	lsls	r2, r2, #21
 800350c:	430a      	orrs	r2, r1
 800350e:	491f      	ldr	r1, [pc, #124]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	610b      	str	r3, [r1, #16]
 8003514:	e011      	b.n	800353a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003516:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800351e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6892      	ldr	r2, [r2, #8]
 8003526:	0211      	lsls	r1, r2, #8
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6952      	ldr	r2, [r2, #20]
 800352c:	0852      	lsrs	r2, r2, #1
 800352e:	3a01      	subs	r2, #1
 8003530:	0652      	lsls	r2, r2, #25
 8003532:	430a      	orrs	r2, r1
 8003534:	4915      	ldr	r1, [pc, #84]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003536:	4313      	orrs	r3, r2
 8003538:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800353a:	4b14      	ldr	r3, [pc, #80]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a13      	ldr	r2, [pc, #76]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003540:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003544:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fe fae5 	bl	8001b14 <HAL_GetTick>
 800354a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800354c:	e009      	b.n	8003562 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800354e:	f7fe fae1 	bl	8001b14 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d902      	bls.n	8003562 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	73fb      	strb	r3, [r7, #15]
          break;
 8003560:	e005      	b.n	800356e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0ef      	beq.n	800354e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	4903      	ldr	r1, [pc, #12]	@ (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003582:	7bfb      	ldrb	r3, [r7, #15]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000

08003590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e049      	b.n	8003636 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fe f8fc 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f000 fb52 	bl	8003c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e049      	b.n	80036e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d106      	bne.n	800366a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f841 	bl	80036ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3304      	adds	r3, #4
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f000 fafb 	bl	8003c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <HAL_TIM_PWM_Start+0x24>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e03c      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d109      	bne.n	800373e <HAL_TIM_PWM_Start+0x3e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e02f      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d109      	bne.n	8003758 <HAL_TIM_PWM_Start+0x58>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e022      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b0c      	cmp	r3, #12
 800375c:	d109      	bne.n	8003772 <HAL_TIM_PWM_Start+0x72>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	bf14      	ite	ne
 800376a:	2301      	movne	r3, #1
 800376c:	2300      	moveq	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	e015      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b10      	cmp	r3, #16
 8003776:	d109      	bne.n	800378c <HAL_TIM_PWM_Start+0x8c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	bf14      	ite	ne
 8003784:	2301      	movne	r3, #1
 8003786:	2300      	moveq	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e008      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e07e      	b.n	80038a4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <HAL_TIM_PWM_Start+0xb6>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037b4:	e023      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d104      	bne.n	80037c6 <HAL_TIM_PWM_Start+0xc6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037c4:	e01b      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_PWM_Start+0xd6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037d4:	e013      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Start+0xe6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037e4:	e00b      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Start+0xf6>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037f4:	e003      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2201      	movs	r2, #1
 8003804:	6839      	ldr	r1, [r7, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fdbe 	bl	8004388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a26      	ldr	r2, [pc, #152]	@ (80038ac <HAL_TIM_PWM_Start+0x1ac>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d009      	beq.n	800382a <HAL_TIM_PWM_Start+0x12a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a25      	ldr	r2, [pc, #148]	@ (80038b0 <HAL_TIM_PWM_Start+0x1b0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d004      	beq.n	800382a <HAL_TIM_PWM_Start+0x12a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a23      	ldr	r2, [pc, #140]	@ (80038b4 <HAL_TIM_PWM_Start+0x1b4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d101      	bne.n	800382e <HAL_TIM_PWM_Start+0x12e>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_TIM_PWM_Start+0x130>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003842:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a18      	ldr	r2, [pc, #96]	@ (80038ac <HAL_TIM_PWM_Start+0x1ac>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_TIM_PWM_Start+0x162>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003856:	d004      	beq.n	8003862 <HAL_TIM_PWM_Start+0x162>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a14      	ldr	r2, [pc, #80]	@ (80038b0 <HAL_TIM_PWM_Start+0x1b0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d115      	bne.n	800388e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <HAL_TIM_PWM_Start+0x1b8>)
 800386a:	4013      	ands	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b06      	cmp	r3, #6
 8003872:	d015      	beq.n	80038a0 <HAL_TIM_PWM_Start+0x1a0>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387a:	d011      	beq.n	80038a0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	e008      	b.n	80038a0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e000      	b.n	80038a2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40012c00 	.word	0x40012c00
 80038b0:	40014000 	.word	0x40014000
 80038b4:	40014400 	.word	0x40014400
 80038b8:	00010007 	.word	0x00010007

080038bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e0ff      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x21e>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b14      	cmp	r3, #20
 80038e6:	f200 80f0 	bhi.w	8003aca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80038ea:	a201      	add	r2, pc, #4	@ (adr r2, 80038f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	08003945 	.word	0x08003945
 80038f4:	08003acb 	.word	0x08003acb
 80038f8:	08003acb 	.word	0x08003acb
 80038fc:	08003acb 	.word	0x08003acb
 8003900:	08003985 	.word	0x08003985
 8003904:	08003acb 	.word	0x08003acb
 8003908:	08003acb 	.word	0x08003acb
 800390c:	08003acb 	.word	0x08003acb
 8003910:	080039c7 	.word	0x080039c7
 8003914:	08003acb 	.word	0x08003acb
 8003918:	08003acb 	.word	0x08003acb
 800391c:	08003acb 	.word	0x08003acb
 8003920:	08003a07 	.word	0x08003a07
 8003924:	08003acb 	.word	0x08003acb
 8003928:	08003acb 	.word	0x08003acb
 800392c:	08003acb 	.word	0x08003acb
 8003930:	08003a49 	.word	0x08003a49
 8003934:	08003acb 	.word	0x08003acb
 8003938:	08003acb 	.word	0x08003acb
 800393c:	08003acb 	.word	0x08003acb
 8003940:	08003a89 	.word	0x08003a89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fa04 	bl	8003d58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0208 	orr.w	r2, r2, #8
 800395e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0204 	bic.w	r2, r2, #4
 800396e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6999      	ldr	r1, [r3, #24]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	619a      	str	r2, [r3, #24]
      break;
 8003982:	e0a5      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fa60 	bl	8003e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800399e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6999      	ldr	r1, [r3, #24]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	021a      	lsls	r2, r3, #8
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	619a      	str	r2, [r3, #24]
      break;
 80039c4:	e084      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fab9 	bl	8003f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0208 	orr.w	r2, r2, #8
 80039e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0204 	bic.w	r2, r2, #4
 80039f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69d9      	ldr	r1, [r3, #28]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	61da      	str	r2, [r3, #28]
      break;
 8003a04:	e064      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fb11 	bl	8004034 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69d9      	ldr	r1, [r3, #28]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	021a      	lsls	r2, r3, #8
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	61da      	str	r2, [r3, #28]
      break;
 8003a46:	e043      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fb4e 	bl	80040f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0208 	orr.w	r2, r2, #8
 8003a62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0204 	bic.w	r2, r2, #4
 8003a72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a86:	e023      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fb86 	bl	80041a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aa2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ab2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	021a      	lsls	r2, r3, #8
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ac8:	e002      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ace:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop

08003ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIM_ConfigClockSource+0x1c>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e0b6      	b.n	8003c6e <HAL_TIM_ConfigClockSource+0x18a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3c:	d03e      	beq.n	8003bbc <HAL_TIM_ConfigClockSource+0xd8>
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b42:	f200 8087 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x170>
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4a:	f000 8086 	beq.w	8003c5a <HAL_TIM_ConfigClockSource+0x176>
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b52:	d87f      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x170>
 8003b54:	2b70      	cmp	r3, #112	@ 0x70
 8003b56:	d01a      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0xaa>
 8003b58:	2b70      	cmp	r3, #112	@ 0x70
 8003b5a:	d87b      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x170>
 8003b5c:	2b60      	cmp	r3, #96	@ 0x60
 8003b5e:	d050      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x11e>
 8003b60:	2b60      	cmp	r3, #96	@ 0x60
 8003b62:	d877      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x170>
 8003b64:	2b50      	cmp	r3, #80	@ 0x50
 8003b66:	d03c      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0xfe>
 8003b68:	2b50      	cmp	r3, #80	@ 0x50
 8003b6a:	d873      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x170>
 8003b6c:	2b40      	cmp	r3, #64	@ 0x40
 8003b6e:	d058      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x13e>
 8003b70:	2b40      	cmp	r3, #64	@ 0x40
 8003b72:	d86f      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x170>
 8003b74:	2b30      	cmp	r3, #48	@ 0x30
 8003b76:	d064      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x15e>
 8003b78:	2b30      	cmp	r3, #48	@ 0x30
 8003b7a:	d86b      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x170>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d060      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x15e>
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d867      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x170>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d05c      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x15e>
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d05a      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x15e>
 8003b8c:	e062      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b9e:	f000 fbd3 	bl	8004348 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	609a      	str	r2, [r3, #8]
      break;
 8003bba:	e04f      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bcc:	f000 fbbc 	bl	8004348 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bde:	609a      	str	r2, [r3, #8]
      break;
 8003be0:	e03c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f000 fb30 	bl	8004254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2150      	movs	r1, #80	@ 0x50
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fb89 	bl	8004312 <TIM_ITRx_SetConfig>
      break;
 8003c00:	e02c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f000 fb4f 	bl	80042b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2160      	movs	r1, #96	@ 0x60
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fb79 	bl	8004312 <TIM_ITRx_SetConfig>
      break;
 8003c20:	e01c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f000 fb10 	bl	8004254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2140      	movs	r1, #64	@ 0x40
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fb69 	bl	8004312 <TIM_ITRx_SetConfig>
      break;
 8003c40:	e00c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f000 fb60 	bl	8004312 <TIM_ITRx_SetConfig>
      break;
 8003c52:	e003      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      break;
 8003c58:	e000      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a30      	ldr	r2, [pc, #192]	@ (8003d4c <TIM_Base_SetConfig+0xd4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0x20>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c96:	d108      	bne.n	8003caa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a27      	ldr	r2, [pc, #156]	@ (8003d4c <TIM_Base_SetConfig+0xd4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00b      	beq.n	8003cca <TIM_Base_SetConfig+0x52>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb8:	d007      	beq.n	8003cca <TIM_Base_SetConfig+0x52>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a24      	ldr	r2, [pc, #144]	@ (8003d50 <TIM_Base_SetConfig+0xd8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d003      	beq.n	8003cca <TIM_Base_SetConfig+0x52>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a23      	ldr	r2, [pc, #140]	@ (8003d54 <TIM_Base_SetConfig+0xdc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d108      	bne.n	8003cdc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a12      	ldr	r2, [pc, #72]	@ (8003d4c <TIM_Base_SetConfig+0xd4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <TIM_Base_SetConfig+0xa0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a11      	ldr	r2, [pc, #68]	@ (8003d50 <TIM_Base_SetConfig+0xd8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_Base_SetConfig+0xa0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a10      	ldr	r2, [pc, #64]	@ (8003d54 <TIM_Base_SetConfig+0xdc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d103      	bne.n	8003d20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d105      	bne.n	8003d3e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	611a      	str	r2, [r3, #16]
  }
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40014000 	.word	0x40014000
 8003d54:	40014400 	.word	0x40014400

08003d58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f023 0201 	bic.w	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f023 0302 	bic.w	r3, r3, #2
 8003da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a24      	ldr	r2, [pc, #144]	@ (8003e44 <TIM_OC1_SetConfig+0xec>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <TIM_OC1_SetConfig+0x70>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a23      	ldr	r2, [pc, #140]	@ (8003e48 <TIM_OC1_SetConfig+0xf0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_OC1_SetConfig+0x70>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a22      	ldr	r2, [pc, #136]	@ (8003e4c <TIM_OC1_SetConfig+0xf4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d10c      	bne.n	8003de2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f023 0308 	bic.w	r3, r3, #8
 8003dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 0304 	bic.w	r3, r3, #4
 8003de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a17      	ldr	r2, [pc, #92]	@ (8003e44 <TIM_OC1_SetConfig+0xec>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_OC1_SetConfig+0xa2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a16      	ldr	r2, [pc, #88]	@ (8003e48 <TIM_OC1_SetConfig+0xf0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_OC1_SetConfig+0xa2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a15      	ldr	r2, [pc, #84]	@ (8003e4c <TIM_OC1_SetConfig+0xf4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d111      	bne.n	8003e1e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	621a      	str	r2, [r3, #32]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40014400 	.word	0x40014400

08003e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f023 0210 	bic.w	r2, r3, #16
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0320 	bic.w	r3, r3, #32
 8003e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a22      	ldr	r2, [pc, #136]	@ (8003f38 <TIM_OC2_SetConfig+0xe8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10d      	bne.n	8003ed0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ece:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a19      	ldr	r2, [pc, #100]	@ (8003f38 <TIM_OC2_SetConfig+0xe8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d007      	beq.n	8003ee8 <TIM_OC2_SetConfig+0x98>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a18      	ldr	r2, [pc, #96]	@ (8003f3c <TIM_OC2_SetConfig+0xec>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d003      	beq.n	8003ee8 <TIM_OC2_SetConfig+0x98>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a17      	ldr	r2, [pc, #92]	@ (8003f40 <TIM_OC2_SetConfig+0xf0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d113      	bne.n	8003f10 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400

08003f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a21      	ldr	r2, [pc, #132]	@ (8004028 <TIM_OC3_SetConfig+0xe4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d10d      	bne.n	8003fc2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a18      	ldr	r2, [pc, #96]	@ (8004028 <TIM_OC3_SetConfig+0xe4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d007      	beq.n	8003fda <TIM_OC3_SetConfig+0x96>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a17      	ldr	r2, [pc, #92]	@ (800402c <TIM_OC3_SetConfig+0xe8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_OC3_SetConfig+0x96>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a16      	ldr	r2, [pc, #88]	@ (8004030 <TIM_OC3_SetConfig+0xec>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d113      	bne.n	8004002 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40012c00 	.word	0x40012c00
 800402c:	40014000 	.word	0x40014000
 8004030:	40014400 	.word	0x40014400

08004034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800406e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	031b      	lsls	r3, r3, #12
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a14      	ldr	r2, [pc, #80]	@ (80040e4 <TIM_OC4_SetConfig+0xb0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d007      	beq.n	80040a8 <TIM_OC4_SetConfig+0x74>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a13      	ldr	r2, [pc, #76]	@ (80040e8 <TIM_OC4_SetConfig+0xb4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_OC4_SetConfig+0x74>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a12      	ldr	r2, [pc, #72]	@ (80040ec <TIM_OC4_SetConfig+0xb8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d109      	bne.n	80040bc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	019b      	lsls	r3, r3, #6
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	621a      	str	r2, [r3, #32]
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40012c00 	.word	0x40012c00
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40014400 	.word	0x40014400

080040f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800411e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004134:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a13      	ldr	r2, [pc, #76]	@ (8004194 <TIM_OC5_SetConfig+0xa4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <TIM_OC5_SetConfig+0x6a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a12      	ldr	r2, [pc, #72]	@ (8004198 <TIM_OC5_SetConfig+0xa8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d003      	beq.n	800415a <TIM_OC5_SetConfig+0x6a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a11      	ldr	r2, [pc, #68]	@ (800419c <TIM_OC5_SetConfig+0xac>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d109      	bne.n	800416e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004160:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	621a      	str	r2, [r3, #32]
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40014000 	.word	0x40014000
 800419c:	40014400 	.word	0x40014400

080041a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	051b      	lsls	r3, r3, #20
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a14      	ldr	r2, [pc, #80]	@ (8004248 <TIM_OC6_SetConfig+0xa8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d007      	beq.n	800420c <TIM_OC6_SetConfig+0x6c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a13      	ldr	r2, [pc, #76]	@ (800424c <TIM_OC6_SetConfig+0xac>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_OC6_SetConfig+0x6c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a12      	ldr	r2, [pc, #72]	@ (8004250 <TIM_OC6_SetConfig+0xb0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d109      	bne.n	8004220 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004212:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	029b      	lsls	r3, r3, #10
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	621a      	str	r2, [r3, #32]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40014000 	.word	0x40014000
 8004250:	40014400 	.word	0x40014400

08004254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f023 0201 	bic.w	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800427e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f023 030a 	bic.w	r3, r3, #10
 8004290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	621a      	str	r2, [r3, #32]
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b087      	sub	sp, #28
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	f023 0210 	bic.w	r2, r3, #16
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	031b      	lsls	r3, r3, #12
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	f043 0307 	orr.w	r3, r3, #7
 8004334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	609a      	str	r2, [r3, #8]
}
 800433c:	bf00      	nop
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	021a      	lsls	r2, r3, #8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	431a      	orrs	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4313      	orrs	r3, r2
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	609a      	str	r2, [r3, #8]
}
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	2201      	movs	r2, #1
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1a      	ldr	r2, [r3, #32]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	401a      	ands	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1a      	ldr	r2, [r3, #32]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	fa01 f303 	lsl.w	r3, r1, r3
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
	...

080043d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e04f      	b.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a21      	ldr	r2, [pc, #132]	@ (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d108      	bne.n	8004428 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800441c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800442e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a14      	ldr	r2, [pc, #80]	@ (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004454:	d004      	beq.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a10      	ldr	r2, [pc, #64]	@ (800449c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d10c      	bne.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004466:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	4313      	orrs	r3, r2
 8004470:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40014000 	.word	0x40014000

080044a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e060      	b.n	800457e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	041b      	lsls	r3, r3, #16
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a14      	ldr	r2, [pc, #80]	@ (800458c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d115      	bne.n	800456c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	051b      	lsls	r3, r3, #20
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40012c00 	.word	0x40012c00

08004590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e040      	b.n	8004624 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd f9bc 	bl	8001930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	@ 0x24
 80045bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fea6 	bl	8005328 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fc77 	bl	8004ed0 <UART_SetConfig>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e01b      	b.n	8004624 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800460a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 ff25 	bl	800546c <UART_CheckIdleState>
 8004622:	4603      	mov	r3, r0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	@ 0x28
 8004630:	af02      	add	r7, sp, #8
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004640:	2b20      	cmp	r3, #32
 8004642:	d177      	bne.n	8004734 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_UART_Transmit+0x24>
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e070      	b.n	8004736 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2221      	movs	r2, #33	@ 0x21
 8004660:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004662:	f7fd fa57 	bl	8001b14 <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004680:	d108      	bne.n	8004694 <HAL_UART_Transmit+0x68>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	e003      	b.n	800469c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004698:	2300      	movs	r3, #0
 800469a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800469c:	e02f      	b.n	80046fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2200      	movs	r2, #0
 80046a6:	2180      	movs	r1, #128	@ 0x80
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 ff87 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d004      	beq.n	80046be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e03b      	b.n	8004736 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	881a      	ldrh	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d0:	b292      	uxth	r2, r2
 80046d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	3302      	adds	r3, #2
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e007      	b.n	80046ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3301      	adds	r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1c9      	bne.n	800469e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2200      	movs	r2, #0
 8004712:	2140      	movs	r1, #64	@ 0x40
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 ff51 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e005      	b.n	8004736 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08a      	sub	sp, #40	@ 0x28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	4613      	mov	r3, r2
 800474c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004754:	2b20      	cmp	r3, #32
 8004756:	d137      	bne.n	80047c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <HAL_UART_Receive_IT+0x24>
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e030      	b.n	80047ca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a18      	ldr	r2, [pc, #96]	@ (80047d4 <HAL_UART_Receive_IT+0x94>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d01f      	beq.n	80047b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d018      	beq.n	80047b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	613b      	str	r3, [r7, #16]
   return(result);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800479a:	627b      	str	r3, [r7, #36]	@ 0x24
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	623b      	str	r3, [r7, #32]
 80047a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	69f9      	ldr	r1, [r7, #28]
 80047aa:	6a3a      	ldr	r2, [r7, #32]
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e6      	bne.n	8004786 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 ff6a 	bl	8005698 <UART_Start_Receive_IT>
 80047c4:	4603      	mov	r3, r0
 80047c6:	e000      	b.n	80047ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
  }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3728      	adds	r7, #40	@ 0x28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40008000 	.word	0x40008000

080047d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	@ 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d137      	bne.n	8004860 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_UART_Receive_DMA+0x24>
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e030      	b.n	8004862 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a18      	ldr	r2, [pc, #96]	@ (800486c <HAL_UART_Receive_DMA+0x94>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d01f      	beq.n	8004850 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d018      	beq.n	8004850 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	613b      	str	r3, [r7, #16]
   return(result);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	623b      	str	r3, [r7, #32]
 800483e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	69f9      	ldr	r1, [r7, #28]
 8004842:	6a3a      	ldr	r2, [r7, #32]
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	61bb      	str	r3, [r7, #24]
   return(result);
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e6      	bne.n	800481e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	461a      	mov	r2, r3
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 ffe4 	bl	8005824 <UART_Start_Receive_DMA>
 800485c:	4603      	mov	r3, r0
 800485e:	e000      	b.n	8004862 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004860:	2302      	movs	r3, #2
  }
}
 8004862:	4618      	mov	r0, r3
 8004864:	3728      	adds	r7, #40	@ 0x28
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40008000 	.word	0x40008000

08004870 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b0ba      	sub	sp, #232	@ 0xe8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004896:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800489a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800489e:	4013      	ands	r3, r2
 80048a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80048a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d115      	bne.n	80048d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00f      	beq.n	80048d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d009      	beq.n	80048d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 82ca 	beq.w	8004e62 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
      }
      return;
 80048d6:	e2c4      	b.n	8004e62 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80048d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 8117 	beq.w	8004b10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80048f2:	4b85      	ldr	r3, [pc, #532]	@ (8004b08 <HAL_UART_IRQHandler+0x298>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 810a 	beq.w	8004b10 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d011      	beq.n	800492c <HAL_UART_IRQHandler+0xbc>
 8004908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800490c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2201      	movs	r2, #1
 800491a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004922:	f043 0201 	orr.w	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d011      	beq.n	800495c <HAL_UART_IRQHandler+0xec>
 8004938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00b      	beq.n	800495c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2202      	movs	r2, #2
 800494a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004952:	f043 0204 	orr.w	r2, r3, #4
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d011      	beq.n	800498c <HAL_UART_IRQHandler+0x11c>
 8004968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2204      	movs	r2, #4
 800497a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004982:	f043 0202 	orr.w	r2, r3, #2
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800498c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	d017      	beq.n	80049c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d105      	bne.n	80049b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2208      	movs	r2, #8
 80049b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049be:	f043 0208 	orr.w	r2, r3, #8
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d012      	beq.n	80049fa <HAL_UART_IRQHandler+0x18a>
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00c      	beq.n	80049fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8230 	beq.w	8004e66 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00d      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a42:	2b40      	cmp	r3, #64	@ 0x40
 8004a44:	d005      	beq.n	8004a52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d04f      	beq.n	8004af2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 ffac 	bl	80059b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a62:	2b40      	cmp	r3, #64	@ 0x40
 8004a64:	d141      	bne.n	8004aea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1d9      	bne.n	8004a66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d013      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004abe:	4a13      	ldr	r2, [pc, #76]	@ (8004b0c <HAL_UART_IRQHandler+0x29c>)
 8004ac0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fd fa03 	bl	8001ed2 <HAL_DMA_Abort_IT>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d017      	beq.n	8004b02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004adc:	4610      	mov	r0, r2
 8004ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	e00f      	b.n	8004b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f9de 	bl	8004ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	e00b      	b.n	8004b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f9da 	bl	8004ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	e007      	b.n	8004b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f9d6 	bl	8004ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004b00:	e1b1      	b.n	8004e66 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b02:	bf00      	nop
    return;
 8004b04:	e1af      	b.n	8004e66 <HAL_UART_IRQHandler+0x5f6>
 8004b06:	bf00      	nop
 8004b08:	04000120 	.word	0x04000120
 8004b0c:	08005c61 	.word	0x08005c61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	f040 816a 	bne.w	8004dee <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1e:	f003 0310 	and.w	r3, r3, #16
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 8163 	beq.w	8004dee <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 815c 	beq.w	8004dee <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b48:	2b40      	cmp	r3, #64	@ 0x40
 8004b4a:	f040 80d4 	bne.w	8004cf6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 80ad 	beq.w	8004cbe <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	f080 80a5 	bcs.w	8004cbe <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f040 8086 	bne.w	8004c9c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bbe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004bc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1da      	bne.n	8004b90 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004bfe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e1      	bne.n	8004bda <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e3      	bne.n	8004c16 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c6c:	f023 0310 	bic.w	r3, r3, #16
 8004c70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e4      	bne.n	8004c5c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fd f8dd 	bl	8001e56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f8fe 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004cbc:	e0d5      	b.n	8004e6a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004cc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	f040 80ce 	bne.w	8004e6a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	f040 80c5 	bne.w	8004e6a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f8e2 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
      return;
 8004cf4:	e0b9      	b.n	8004e6a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 80ab 	beq.w	8004e6e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004d18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80a6 	beq.w	8004e6e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e4      	bne.n	8004d22 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	623b      	str	r3, [r7, #32]
   return(result);
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3308      	adds	r3, #8
 8004d78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e3      	bne.n	8004d58 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f023 0310 	bic.w	r3, r3, #16
 8004db8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	69b9      	ldr	r1, [r7, #24]
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	617b      	str	r3, [r7, #20]
   return(result);
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e4      	bne.n	8004da4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004de4:	4619      	mov	r1, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f866 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dec:	e03f      	b.n	8004e6e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00e      	beq.n	8004e18 <HAL_UART_IRQHandler+0x5a8>
 8004dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004e0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f001 f921 	bl	8006058 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e16:	e02d      	b.n	8004e74 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00e      	beq.n	8004e42 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01c      	beq.n	8004e72 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	4798      	blx	r3
    }
    return;
 8004e40:	e017      	b.n	8004e72 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d012      	beq.n	8004e74 <HAL_UART_IRQHandler+0x604>
 8004e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00c      	beq.n	8004e74 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 ff16 	bl	8005c8c <UART_EndTransmit_IT>
    return;
 8004e60:	e008      	b.n	8004e74 <HAL_UART_IRQHandler+0x604>
      return;
 8004e62:	bf00      	nop
 8004e64:	e006      	b.n	8004e74 <HAL_UART_IRQHandler+0x604>
    return;
 8004e66:	bf00      	nop
 8004e68:	e004      	b.n	8004e74 <HAL_UART_IRQHandler+0x604>
      return;
 8004e6a:	bf00      	nop
 8004e6c:	e002      	b.n	8004e74 <HAL_UART_IRQHandler+0x604>
      return;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <HAL_UART_IRQHandler+0x604>
    return;
 8004e72:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e74:	37e8      	adds	r7, #232	@ 0xe8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop

08004e7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed4:	b08a      	sub	sp, #40	@ 0x28
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4bb4      	ldr	r3, [pc, #720]	@ (80051d0 <UART_SetConfig+0x300>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4aa9      	ldr	r2, [pc, #676]	@ (80051d4 <UART_SetConfig+0x304>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4aa0      	ldr	r2, [pc, #640]	@ (80051d8 <UART_SetConfig+0x308>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d126      	bne.n	8004fa8 <UART_SetConfig+0xd8>
 8004f5a:	4ba0      	ldr	r3, [pc, #640]	@ (80051dc <UART_SetConfig+0x30c>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d81b      	bhi.n	8004fa0 <UART_SetConfig+0xd0>
 8004f68:	a201      	add	r2, pc, #4	@ (adr r2, 8004f70 <UART_SetConfig+0xa0>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	08004f89 	.word	0x08004f89
 8004f7c:	08004f99 	.word	0x08004f99
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f86:	e080      	b.n	800508a <UART_SetConfig+0x1ba>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8e:	e07c      	b.n	800508a <UART_SetConfig+0x1ba>
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f96:	e078      	b.n	800508a <UART_SetConfig+0x1ba>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9e:	e074      	b.n	800508a <UART_SetConfig+0x1ba>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa6:	e070      	b.n	800508a <UART_SetConfig+0x1ba>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a8c      	ldr	r2, [pc, #560]	@ (80051e0 <UART_SetConfig+0x310>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d138      	bne.n	8005024 <UART_SetConfig+0x154>
 8004fb2:	4b8a      	ldr	r3, [pc, #552]	@ (80051dc <UART_SetConfig+0x30c>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb8:	f003 030c 	and.w	r3, r3, #12
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	d82d      	bhi.n	800501c <UART_SetConfig+0x14c>
 8004fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc8 <UART_SetConfig+0xf8>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004ffd 	.word	0x08004ffd
 8004fcc:	0800501d 	.word	0x0800501d
 8004fd0:	0800501d 	.word	0x0800501d
 8004fd4:	0800501d 	.word	0x0800501d
 8004fd8:	0800500d 	.word	0x0800500d
 8004fdc:	0800501d 	.word	0x0800501d
 8004fe0:	0800501d 	.word	0x0800501d
 8004fe4:	0800501d 	.word	0x0800501d
 8004fe8:	08005005 	.word	0x08005005
 8004fec:	0800501d 	.word	0x0800501d
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	08005015 	.word	0x08005015
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005002:	e042      	b.n	800508a <UART_SetConfig+0x1ba>
 8005004:	2302      	movs	r3, #2
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800500a:	e03e      	b.n	800508a <UART_SetConfig+0x1ba>
 800500c:	2304      	movs	r3, #4
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005012:	e03a      	b.n	800508a <UART_SetConfig+0x1ba>
 8005014:	2308      	movs	r3, #8
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501a:	e036      	b.n	800508a <UART_SetConfig+0x1ba>
 800501c:	2310      	movs	r3, #16
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005022:	e032      	b.n	800508a <UART_SetConfig+0x1ba>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6a      	ldr	r2, [pc, #424]	@ (80051d4 <UART_SetConfig+0x304>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d12a      	bne.n	8005084 <UART_SetConfig+0x1b4>
 800502e:	4b6b      	ldr	r3, [pc, #428]	@ (80051dc <UART_SetConfig+0x30c>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005034:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005038:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800503c:	d01a      	beq.n	8005074 <UART_SetConfig+0x1a4>
 800503e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005042:	d81b      	bhi.n	800507c <UART_SetConfig+0x1ac>
 8005044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005048:	d00c      	beq.n	8005064 <UART_SetConfig+0x194>
 800504a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800504e:	d815      	bhi.n	800507c <UART_SetConfig+0x1ac>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <UART_SetConfig+0x18c>
 8005054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005058:	d008      	beq.n	800506c <UART_SetConfig+0x19c>
 800505a:	e00f      	b.n	800507c <UART_SetConfig+0x1ac>
 800505c:	2300      	movs	r3, #0
 800505e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005062:	e012      	b.n	800508a <UART_SetConfig+0x1ba>
 8005064:	2302      	movs	r3, #2
 8005066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506a:	e00e      	b.n	800508a <UART_SetConfig+0x1ba>
 800506c:	2304      	movs	r3, #4
 800506e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005072:	e00a      	b.n	800508a <UART_SetConfig+0x1ba>
 8005074:	2308      	movs	r3, #8
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507a:	e006      	b.n	800508a <UART_SetConfig+0x1ba>
 800507c:	2310      	movs	r3, #16
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005082:	e002      	b.n	800508a <UART_SetConfig+0x1ba>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a51      	ldr	r2, [pc, #324]	@ (80051d4 <UART_SetConfig+0x304>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d17a      	bne.n	800518a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005094:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005098:	2b08      	cmp	r3, #8
 800509a:	d824      	bhi.n	80050e6 <UART_SetConfig+0x216>
 800509c:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <UART_SetConfig+0x1d4>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050e7 	.word	0x080050e7
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	080050e7 	.word	0x080050e7
 80050b4:	080050d7 	.word	0x080050d7
 80050b8:	080050e7 	.word	0x080050e7
 80050bc:	080050e7 	.word	0x080050e7
 80050c0:	080050e7 	.word	0x080050e7
 80050c4:	080050df 	.word	0x080050df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c8:	f7fd feee 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 80050cc:	61f8      	str	r0, [r7, #28]
        break;
 80050ce:	e010      	b.n	80050f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d0:	4b44      	ldr	r3, [pc, #272]	@ (80051e4 <UART_SetConfig+0x314>)
 80050d2:	61fb      	str	r3, [r7, #28]
        break;
 80050d4:	e00d      	b.n	80050f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d6:	f7fd fe4f 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 80050da:	61f8      	str	r0, [r7, #28]
        break;
 80050dc:	e009      	b.n	80050f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050e2:	61fb      	str	r3, [r7, #28]
        break;
 80050e4:	e005      	b.n	80050f2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8107 	beq.w	8005308 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	4413      	add	r3, r2
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	429a      	cmp	r2, r3
 8005108:	d305      	bcc.n	8005116 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	429a      	cmp	r2, r3
 8005114:	d903      	bls.n	800511e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800511c:	e0f4      	b.n	8005308 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	2200      	movs	r2, #0
 8005122:	461c      	mov	r4, r3
 8005124:	4615      	mov	r5, r2
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	022b      	lsls	r3, r5, #8
 8005130:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005134:	0222      	lsls	r2, r4, #8
 8005136:	68f9      	ldr	r1, [r7, #12]
 8005138:	6849      	ldr	r1, [r1, #4]
 800513a:	0849      	lsrs	r1, r1, #1
 800513c:	2000      	movs	r0, #0
 800513e:	4688      	mov	r8, r1
 8005140:	4681      	mov	r9, r0
 8005142:	eb12 0a08 	adds.w	sl, r2, r8
 8005146:	eb43 0b09 	adc.w	fp, r3, r9
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	603b      	str	r3, [r7, #0]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005158:	4650      	mov	r0, sl
 800515a:	4659      	mov	r1, fp
 800515c:	f7fb fc76 	bl	8000a4c <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4613      	mov	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800516e:	d308      	bcc.n	8005182 <UART_SetConfig+0x2b2>
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005176:	d204      	bcs.n	8005182 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	60da      	str	r2, [r3, #12]
 8005180:	e0c2      	b.n	8005308 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005188:	e0be      	b.n	8005308 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005192:	d16a      	bne.n	800526a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005194:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005198:	2b08      	cmp	r3, #8
 800519a:	d834      	bhi.n	8005206 <UART_SetConfig+0x336>
 800519c:	a201      	add	r2, pc, #4	@ (adr r2, 80051a4 <UART_SetConfig+0x2d4>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051e9 	.word	0x080051e9
 80051ac:	080051f1 	.word	0x080051f1
 80051b0:	08005207 	.word	0x08005207
 80051b4:	080051f7 	.word	0x080051f7
 80051b8:	08005207 	.word	0x08005207
 80051bc:	08005207 	.word	0x08005207
 80051c0:	08005207 	.word	0x08005207
 80051c4:	080051ff 	.word	0x080051ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c8:	f7fd fe6e 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 80051cc:	61f8      	str	r0, [r7, #28]
        break;
 80051ce:	e020      	b.n	8005212 <UART_SetConfig+0x342>
 80051d0:	efff69f3 	.word	0xefff69f3
 80051d4:	40008000 	.word	0x40008000
 80051d8:	40013800 	.word	0x40013800
 80051dc:	40021000 	.word	0x40021000
 80051e0:	40004400 	.word	0x40004400
 80051e4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051e8:	f7fd fe74 	bl	8002ed4 <HAL_RCC_GetPCLK2Freq>
 80051ec:	61f8      	str	r0, [r7, #28]
        break;
 80051ee:	e010      	b.n	8005212 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005324 <UART_SetConfig+0x454>)
 80051f2:	61fb      	str	r3, [r7, #28]
        break;
 80051f4:	e00d      	b.n	8005212 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051f6:	f7fd fdbf 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 80051fa:	61f8      	str	r0, [r7, #28]
        break;
 80051fc:	e009      	b.n	8005212 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005202:	61fb      	str	r3, [r7, #28]
        break;
 8005204:	e005      	b.n	8005212 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005210:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d077      	beq.n	8005308 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	005a      	lsls	r2, r3, #1
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	085b      	lsrs	r3, r3, #1
 8005222:	441a      	add	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	fbb2 f3f3 	udiv	r3, r2, r3
 800522c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b0f      	cmp	r3, #15
 8005232:	d916      	bls.n	8005262 <UART_SetConfig+0x392>
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800523a:	d212      	bcs.n	8005262 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f023 030f 	bic.w	r3, r3, #15
 8005244:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	b29b      	uxth	r3, r3
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	b29a      	uxth	r2, r3
 8005252:	8afb      	ldrh	r3, [r7, #22]
 8005254:	4313      	orrs	r3, r2
 8005256:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	8afa      	ldrh	r2, [r7, #22]
 800525e:	60da      	str	r2, [r3, #12]
 8005260:	e052      	b.n	8005308 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005268:	e04e      	b.n	8005308 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800526a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800526e:	2b08      	cmp	r3, #8
 8005270:	d827      	bhi.n	80052c2 <UART_SetConfig+0x3f2>
 8005272:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <UART_SetConfig+0x3a8>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	0800529d 	.word	0x0800529d
 800527c:	080052a5 	.word	0x080052a5
 8005280:	080052ad 	.word	0x080052ad
 8005284:	080052c3 	.word	0x080052c3
 8005288:	080052b3 	.word	0x080052b3
 800528c:	080052c3 	.word	0x080052c3
 8005290:	080052c3 	.word	0x080052c3
 8005294:	080052c3 	.word	0x080052c3
 8005298:	080052bb 	.word	0x080052bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800529c:	f7fd fe04 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 80052a0:	61f8      	str	r0, [r7, #28]
        break;
 80052a2:	e014      	b.n	80052ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a4:	f7fd fe16 	bl	8002ed4 <HAL_RCC_GetPCLK2Freq>
 80052a8:	61f8      	str	r0, [r7, #28]
        break;
 80052aa:	e010      	b.n	80052ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005324 <UART_SetConfig+0x454>)
 80052ae:	61fb      	str	r3, [r7, #28]
        break;
 80052b0:	e00d      	b.n	80052ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b2:	f7fd fd61 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 80052b6:	61f8      	str	r0, [r7, #28]
        break;
 80052b8:	e009      	b.n	80052ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052be:	61fb      	str	r3, [r7, #28]
        break;
 80052c0:	e005      	b.n	80052ce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052cc:	bf00      	nop
    }

    if (pclk != 0U)
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d019      	beq.n	8005308 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	085a      	lsrs	r2, r3, #1
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	441a      	add	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b0f      	cmp	r3, #15
 80052ec:	d909      	bls.n	8005302 <UART_SetConfig+0x432>
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f4:	d205      	bcs.n	8005302 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	e002      	b.n	8005308 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005314:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005318:	4618      	mov	r0, r3
 800531a:	3728      	adds	r7, #40	@ 0x28
 800531c:	46bd      	mov	sp, r7
 800531e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005322:	bf00      	nop
 8005324:	00f42400 	.word	0x00f42400

08005328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01a      	beq.n	800543e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005426:	d10a      	bne.n	800543e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b098      	sub	sp, #96	@ 0x60
 8005470:	af02      	add	r7, sp, #8
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800547c:	f7fc fb4a 	bl	8001b14 <HAL_GetTick>
 8005480:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b08      	cmp	r3, #8
 800548e:	d12e      	bne.n	80054ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005490:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005498:	2200      	movs	r2, #0
 800549a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f88c 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d021      	beq.n	80054ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054be:	653b      	str	r3, [r7, #80]	@ 0x50
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e6      	bne.n	80054aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e062      	b.n	80055b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d149      	bne.n	8005590 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005504:	2200      	movs	r2, #0
 8005506:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f856 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d03c      	beq.n	8005590 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	623b      	str	r3, [r7, #32]
   return(result);
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800552a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005534:	633b      	str	r3, [r7, #48]	@ 0x30
 8005536:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800553a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e6      	bne.n	8005516 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3308      	adds	r3, #8
 800554e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	60fb      	str	r3, [r7, #12]
   return(result);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0301 	bic.w	r3, r3, #1
 800555e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3308      	adds	r3, #8
 8005566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005568:	61fa      	str	r2, [r7, #28]
 800556a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	69b9      	ldr	r1, [r7, #24]
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	617b      	str	r3, [r7, #20]
   return(result);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e5      	bne.n	8005548 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e011      	b.n	80055b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3758      	adds	r7, #88	@ 0x58
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055cc:	e04f      	b.n	800566e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d04b      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d6:	f7fc fa9d 	bl	8001b14 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <UART_WaitOnFlagUntilTimeout+0x30>
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e04e      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d037      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0xb2>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b80      	cmp	r3, #128	@ 0x80
 8005602:	d034      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b40      	cmp	r3, #64	@ 0x40
 8005608:	d031      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b08      	cmp	r3, #8
 8005616:	d110      	bne.n	800563a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2208      	movs	r2, #8
 800561e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f9c5 	bl	80059b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2208      	movs	r2, #8
 800562a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e029      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005648:	d111      	bne.n	800566e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f9ab 	bl	80059b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e00f      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4013      	ands	r3, r2
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	429a      	cmp	r2, r3
 800567c:	bf0c      	ite	eq
 800567e:	2301      	moveq	r3, #1
 8005680:	2300      	movne	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	79fb      	ldrb	r3, [r7, #7]
 8005688:	429a      	cmp	r2, r3
 800568a:	d0a0      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005698:	b480      	push	{r7}
 800569a:	b097      	sub	sp, #92	@ 0x5c
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ca:	d10e      	bne.n	80056ea <UART_Start_Receive_IT+0x52>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d105      	bne.n	80056e0 <UART_Start_Receive_IT+0x48>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80056da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80056de:	e02d      	b.n	800573c <UART_Start_Receive_IT+0xa4>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	22ff      	movs	r2, #255	@ 0xff
 80056e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80056e8:	e028      	b.n	800573c <UART_Start_Receive_IT+0xa4>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <UART_Start_Receive_IT+0x76>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <UART_Start_Receive_IT+0x6c>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	22ff      	movs	r2, #255	@ 0xff
 80056fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005702:	e01b      	b.n	800573c <UART_Start_Receive_IT+0xa4>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	227f      	movs	r2, #127	@ 0x7f
 8005708:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800570c:	e016      	b.n	800573c <UART_Start_Receive_IT+0xa4>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005716:	d10d      	bne.n	8005734 <UART_Start_Receive_IT+0x9c>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d104      	bne.n	800572a <UART_Start_Receive_IT+0x92>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	227f      	movs	r2, #127	@ 0x7f
 8005724:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005728:	e008      	b.n	800573c <UART_Start_Receive_IT+0xa4>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	223f      	movs	r2, #63	@ 0x3f
 800572e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005732:	e003      	b.n	800573c <UART_Start_Receive_IT+0xa4>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2222      	movs	r2, #34	@ 0x22
 8005748:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3308      	adds	r3, #8
 8005752:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800575c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	657b      	str	r3, [r7, #84]	@ 0x54
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3308      	adds	r3, #8
 800576a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800576c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800576e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800577a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e5      	bne.n	800574c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005788:	d107      	bne.n	800579a <UART_Start_Receive_IT+0x102>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4a21      	ldr	r2, [pc, #132]	@ (800581c <UART_Start_Receive_IT+0x184>)
 8005796:	669a      	str	r2, [r3, #104]	@ 0x68
 8005798:	e002      	b.n	80057a0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4a20      	ldr	r2, [pc, #128]	@ (8005820 <UART_Start_Receive_IT+0x188>)
 800579e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d019      	beq.n	80057dc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80057bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057ce:	e841 2300 	strex	r3, r2, [r1]
 80057d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80057d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1e6      	bne.n	80057a8 <UART_Start_Receive_IT+0x110>
 80057da:	e018      	b.n	800580e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f043 0320 	orr.w	r3, r3, #32
 80057f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057fa:	623b      	str	r3, [r7, #32]
 80057fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	69f9      	ldr	r1, [r7, #28]
 8005800:	6a3a      	ldr	r2, [r7, #32]
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	61bb      	str	r3, [r7, #24]
   return(result);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e6      	bne.n	80057dc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	375c      	adds	r7, #92	@ 0x5c
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	08005e9d 	.word	0x08005e9d
 8005820:	08005ce1 	.word	0x08005ce1

08005824 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b096      	sub	sp, #88	@ 0x58
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	4613      	mov	r3, r2
 8005830:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2222      	movs	r2, #34	@ 0x22
 800584c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005854:	2b00      	cmp	r3, #0
 8005856:	d028      	beq.n	80058aa <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585c:	4a3e      	ldr	r2, [pc, #248]	@ (8005958 <UART_Start_Receive_DMA+0x134>)
 800585e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005864:	4a3d      	ldr	r2, [pc, #244]	@ (800595c <UART_Start_Receive_DMA+0x138>)
 8005866:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800586c:	4a3c      	ldr	r2, [pc, #240]	@ (8005960 <UART_Start_Receive_DMA+0x13c>)
 800586e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005874:	2200      	movs	r2, #0
 8005876:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3324      	adds	r3, #36	@ 0x24
 8005882:	4619      	mov	r1, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005888:	461a      	mov	r2, r3
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	f7fc fa83 	bl	8001d96 <HAL_DMA_Start_IT>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d009      	beq.n	80058aa <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2210      	movs	r2, #16
 800589a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e051      	b.n	800594e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d018      	beq.n	80058e4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058d2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80058de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e6      	bne.n	80058b2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	e853 3f00 	ldrex	r3, [r3]
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3308      	adds	r3, #8
 8005902:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005904:	637a      	str	r2, [r7, #52]	@ 0x34
 8005906:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800590a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800590c:	e841 2300 	strex	r3, r2, [r1]
 8005910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e5      	bne.n	80058e4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3308      	adds	r3, #8
 800591e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	613b      	str	r3, [r7, #16]
   return(result);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800592e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3308      	adds	r3, #8
 8005936:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005938:	623a      	str	r2, [r7, #32]
 800593a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	69f9      	ldr	r1, [r7, #28]
 800593e:	6a3a      	ldr	r2, [r7, #32]
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	61bb      	str	r3, [r7, #24]
   return(result);
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e5      	bne.n	8005918 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3758      	adds	r7, #88	@ 0x58
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	08005a79 	.word	0x08005a79
 800595c:	08005ba5 	.word	0x08005ba5
 8005960:	08005be3 	.word	0x08005be3

08005964 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b089      	sub	sp, #36	@ 0x24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	60bb      	str	r3, [r7, #8]
   return(result);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6979      	ldr	r1, [r7, #20]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	613b      	str	r3, [r7, #16]
   return(result);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e6      	bne.n	800596c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80059a4:	bf00      	nop
 80059a6:	3724      	adds	r7, #36	@ 0x24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b095      	sub	sp, #84	@ 0x54
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80059d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e6      	bne.n	80059b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3308      	adds	r3, #8
 80059f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3308      	adds	r3, #8
 8005a08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e5      	bne.n	80059ea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d118      	bne.n	8005a58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f023 0310 	bic.w	r3, r3, #16
 8005a3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6979      	ldr	r1, [r7, #20]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	613b      	str	r3, [r7, #16]
   return(result);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e6      	bne.n	8005a26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a6c:	bf00      	nop
 8005a6e:	3754      	adds	r7, #84	@ 0x54
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b09c      	sub	sp, #112	@ 0x70
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a84:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d171      	bne.n	8005b78 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005a94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005abc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ac0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e6      	bne.n	8005a9c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae0:	f023 0301 	bic.w	r3, r3, #1
 8005ae4:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3308      	adds	r3, #8
 8005aec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005aee:	647a      	str	r2, [r7, #68]	@ 0x44
 8005af0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3308      	adds	r3, #8
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	623b      	str	r3, [r7, #32]
   return(result);
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b18:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b22:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e5      	bne.n	8005b02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d118      	bne.n	8005b78 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0310 	bic.w	r3, r3, #16
 8005b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	69b9      	ldr	r1, [r7, #24]
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	617b      	str	r3, [r7, #20]
   return(result);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e6      	bne.n	8005b46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d107      	bne.n	8005b96 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b90:	f7ff f992 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b94:	e002      	b.n	8005b9c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005b96:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b98:	f7fb fbbc 	bl	8001314 <HAL_UART_RxCpltCallback>
}
 8005b9c:	bf00      	nop
 8005b9e:	3770      	adds	r7, #112	@ 0x70
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d109      	bne.n	8005bd4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	4619      	mov	r1, r3
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f7ff f973 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bd2:	e002      	b.n	8005bda <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7ff f95b 	bl	8004e90 <HAL_UART_RxHalfCpltCallback>
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bf4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c08:	2b80      	cmp	r3, #128	@ 0x80
 8005c0a:	d109      	bne.n	8005c20 <UART_DMAError+0x3e>
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2b21      	cmp	r3, #33	@ 0x21
 8005c10:	d106      	bne.n	8005c20 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005c1a:	6978      	ldr	r0, [r7, #20]
 8005c1c:	f7ff fea2 	bl	8005964 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2a:	2b40      	cmp	r3, #64	@ 0x40
 8005c2c:	d109      	bne.n	8005c42 <UART_DMAError+0x60>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b22      	cmp	r3, #34	@ 0x22
 8005c32:	d106      	bne.n	8005c42 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005c3c:	6978      	ldr	r0, [r7, #20]
 8005c3e:	f7ff feb7 	bl	80059b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c48:	f043 0210 	orr.w	r2, r3, #16
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c52:	6978      	ldr	r0, [r7, #20]
 8005c54:	f7ff f926 	bl	8004ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c58:	bf00      	nop
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f7ff f910 	bl	8004ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ca8:	61fb      	str	r3, [r7, #28]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	6979      	ldr	r1, [r7, #20]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e6      	bne.n	8005c94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff f8d2 	bl	8004e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cd8:	bf00      	nop
 8005cda:	3720      	adds	r7, #32
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b09c      	sub	sp, #112	@ 0x70
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005cee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cf8:	2b22      	cmp	r3, #34	@ 0x22
 8005cfa:	f040 80be 	bne.w	8005e7a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005d04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005d0c:	b2d9      	uxtb	r1, r3
 8005d0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d18:	400a      	ands	r2, r1
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f040 80a3 	bne.w	8005e8e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e6      	bne.n	8005d48 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3308      	adds	r3, #8
 8005d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3308      	adds	r3, #8
 8005d98:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005d9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005da0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e5      	bne.n	8005d7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a34      	ldr	r2, [pc, #208]	@ (8005e98 <UART_RxISR_8BIT+0x1b8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d01f      	beq.n	8005e0c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d018      	beq.n	8005e0c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	623b      	str	r3, [r7, #32]
   return(result);
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005dee:	663b      	str	r3, [r7, #96]	@ 0x60
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005df8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e6      	bne.n	8005dda <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d12e      	bne.n	8005e72 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0310 	bic.w	r3, r3, #16
 8005e2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e38:	61fb      	str	r3, [r7, #28]
 8005e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	69b9      	ldr	r1, [r7, #24]
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	617b      	str	r3, [r7, #20]
   return(result);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e6      	bne.n	8005e1a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f003 0310 	and.w	r3, r3, #16
 8005e56:	2b10      	cmp	r3, #16
 8005e58:	d103      	bne.n	8005e62 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2210      	movs	r2, #16
 8005e60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff f824 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e70:	e00d      	b.n	8005e8e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fb fa4e 	bl	8001314 <HAL_UART_RxCpltCallback>
}
 8005e78:	e009      	b.n	8005e8e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	8b1b      	ldrh	r3, [r3, #24]
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0208 	orr.w	r2, r2, #8
 8005e8a:	b292      	uxth	r2, r2
 8005e8c:	831a      	strh	r2, [r3, #24]
}
 8005e8e:	bf00      	nop
 8005e90:	3770      	adds	r7, #112	@ 0x70
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	40008000 	.word	0x40008000

08005e9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b09c      	sub	sp, #112	@ 0x70
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005eaa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eb4:	2b22      	cmp	r3, #34	@ 0x22
 8005eb6:	f040 80be 	bne.w	8006036 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005ec0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005eca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005ece:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ed8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ede:	1c9a      	adds	r2, r3, #2
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f040 80a3 	bne.w	800604a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005f12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f18:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f22:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f24:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e6      	bne.n	8005f04 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3308      	adds	r3, #8
 8005f54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f56:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e5      	bne.n	8005f36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a34      	ldr	r2, [pc, #208]	@ (8006054 <UART_RxISR_16BIT+0x1b8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d01f      	beq.n	8005fc8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d018      	beq.n	8005fc8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	e853 3f00 	ldrex	r3, [r3]
 8005fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005faa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fb6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e6      	bne.n	8005f96 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d12e      	bne.n	800602e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f023 0310 	bic.w	r3, r3, #16
 8005fea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ff4:	61bb      	str	r3, [r7, #24]
 8005ff6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	6979      	ldr	r1, [r7, #20]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	613b      	str	r3, [r7, #16]
   return(result);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e6      	bne.n	8005fd6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b10      	cmp	r3, #16
 8006014:	d103      	bne.n	800601e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2210      	movs	r2, #16
 800601c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7fe ff46 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800602c:	e00d      	b.n	800604a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fb f970 	bl	8001314 <HAL_UART_RxCpltCallback>
}
 8006034:	e009      	b.n	800604a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	8b1b      	ldrh	r3, [r3, #24]
 800603c:	b29a      	uxth	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0208 	orr.w	r2, r2, #8
 8006046:	b292      	uxth	r2, r2
 8006048:	831a      	strh	r2, [r3, #24]
}
 800604a:	bf00      	nop
 800604c:	3770      	adds	r7, #112	@ 0x70
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40008000 	.word	0x40008000

08006058 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <memset>:
 800606c:	4402      	add	r2, r0
 800606e:	4603      	mov	r3, r0
 8006070:	4293      	cmp	r3, r2
 8006072:	d100      	bne.n	8006076 <memset+0xa>
 8006074:	4770      	bx	lr
 8006076:	f803 1b01 	strb.w	r1, [r3], #1
 800607a:	e7f9      	b.n	8006070 <memset+0x4>

0800607c <__libc_init_array>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4d0d      	ldr	r5, [pc, #52]	@ (80060b4 <__libc_init_array+0x38>)
 8006080:	4c0d      	ldr	r4, [pc, #52]	@ (80060b8 <__libc_init_array+0x3c>)
 8006082:	1b64      	subs	r4, r4, r5
 8006084:	10a4      	asrs	r4, r4, #2
 8006086:	2600      	movs	r6, #0
 8006088:	42a6      	cmp	r6, r4
 800608a:	d109      	bne.n	80060a0 <__libc_init_array+0x24>
 800608c:	4d0b      	ldr	r5, [pc, #44]	@ (80060bc <__libc_init_array+0x40>)
 800608e:	4c0c      	ldr	r4, [pc, #48]	@ (80060c0 <__libc_init_array+0x44>)
 8006090:	f000 f818 	bl	80060c4 <_init>
 8006094:	1b64      	subs	r4, r4, r5
 8006096:	10a4      	asrs	r4, r4, #2
 8006098:	2600      	movs	r6, #0
 800609a:	42a6      	cmp	r6, r4
 800609c:	d105      	bne.n	80060aa <__libc_init_array+0x2e>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a4:	4798      	blx	r3
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7ee      	b.n	8006088 <__libc_init_array+0xc>
 80060aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ae:	4798      	blx	r3
 80060b0:	3601      	adds	r6, #1
 80060b2:	e7f2      	b.n	800609a <__libc_init_array+0x1e>
 80060b4:	0800612c 	.word	0x0800612c
 80060b8:	0800612c 	.word	0x0800612c
 80060bc:	0800612c 	.word	0x0800612c
 80060c0:	08006130 	.word	0x08006130

080060c4 <_init>:
 80060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c6:	bf00      	nop
 80060c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ca:	bc08      	pop	{r3}
 80060cc:	469e      	mov	lr, r3
 80060ce:	4770      	bx	lr

080060d0 <_fini>:
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	bf00      	nop
 80060d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d6:	bc08      	pop	{r3}
 80060d8:	469e      	mov	lr, r3
 80060da:	4770      	bx	lr
